<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on // √Ålex Go{,5z}</title><link>https://agonzalezro.github.io/posts/</link><description>Recent content in Posts on // √Ålex Go{,5z}</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 18 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://agonzalezro.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Why imposter syndrome can be your best friend</title><link>https://agonzalezro.github.io/posts/imposter_syndrome/</link><pubDate>Tue, 18 Oct 2022 00:00:00 +0000</pubDate><guid>https://agonzalezro.github.io/posts/imposter_syndrome/</guid><description>
&lt;p>The infamous &lt;em>imposter syndrome&lt;/em> is always perceived as a bad thing but if you ally with it you could become Best Friends Forever (aka BFF).&lt;/p>
&lt;p>I am pretty sure that in my case the &lt;em>imposter syndrome&lt;/em> has helped me to develop my abilities, especially in tech which is my &amp;ldquo;area of knowledge&amp;rdquo;.&lt;/p>
&lt;p>Life is split into stages, some of those stages are better for your growth than others. There are times when you think you are the king of the world and that you already know everything you need to know but if you are lucky enough to pass through that phase you will realize that you were wrong. In tech, this stage is usually when you go out from the university knowing Java and you think that&amp;rsquo;s enough for earning the also infamous 6-figure-salary. It isn&amp;rsquo;t new either, it&amp;rsquo;s called the &amp;ldquo;Dunning-Kruger effect&amp;rdquo;; from Wikipedia:&lt;/p>
&lt;blockquote>
&lt;p>The Dunning‚ÄìKruger effect is a cognitive bias whereby people with low ability, expertise, or experience regarding a certain type of a task or area of knowledge tend to overestimate their ability or knowledge. Some researchers also include in their definition the opposite effect for high performers: their tendency to underestimate their skills.&lt;/p>
&lt;/blockquote>
&lt;p>That&amp;rsquo;s good news for you, if you have reached a state where &lt;em>imposter syndrome&lt;/em> is hitting after you thought you were the king it might mean that you are on the curve to the top after the &amp;ldquo;Valley of Despair&amp;rdquo;; also from Wikipedia:&lt;/p>
&lt;p>&lt;img src="https://agonzalezro.github.io/dunning_kruger_effect_from_wikipedia.svg" alt="Dunning Kruger Effect graph, from wikipedia">&lt;/p>
&lt;p>Now that you are not the person that knows more about the subject being discussed in the room and you have two options here:&lt;/p>
&lt;ol>
&lt;li>Let &lt;em>imposter syndrome&lt;/em> bring you down OR&lt;/li>
&lt;li>Leverage &lt;em>imposter syndrome&lt;/em> in order to become better at the matter at hand.&lt;/li>
&lt;/ol>
&lt;p>If you decide to go for option #2 you have a huge advantage: you already know that there are things you don&amp;rsquo;t know and you are in a room full of people that can help you get better at it. Use this opportunity!&lt;/p>
&lt;p>I felt/feel like that several times but I prefer to take it as an opportunity to ask questions &amp;amp; learn. Knowing that you are not there yet can be fuel to get you to where you want to be in the future or can just bring you down and depress you.&lt;/p>
&lt;p>Believe it or not, everybody was there at some point. You have to options here, either you use &lt;em>imposter syndrome&lt;/em> as a catapult to success or you don‚Äôt. It‚Äôs up to you and if you decide not to do it that‚Äôs also fine, but I know what I would choose.&lt;/p></description></item><item><title>How to prepare the Certified Kubernetes Administrator exam</title><link>https://agonzalezro.github.io/posts/cka/</link><pubDate>Mon, 16 Apr 2018 00:00:00 +0000</pubDate><guid>https://agonzalezro.github.io/posts/cka/</guid><description>
&lt;p>Finally last weekend I did the CKA exam, I was procrastinating it a bit in part because I didn&amp;rsquo;t know what to expect since Kubernetes is huge and I thought that each day extra I spend reading about it would help me.&lt;/p>
&lt;p>TLDR; I did pass the exam and if you work daily with Kubernetes or variants as Openshift you will be ok, they are not trying to catch you in some weird question that not even &lt;a href="https://twitter.com/kelseyhightower">Kelsey&lt;/a> would know how to answer üòÄ&lt;/p>
&lt;p>&lt;img src="https://agonzalezro.github.io/devops/cka.png" alt="CKA certification">&lt;/p>
&lt;h2 id="preparation">Preparation&lt;/h2>
&lt;p>Giving the long quantity of topics that could be covered in the exam I have used several resources to study it.
I will try to sort this in a way that makes sense if you have no knowledge about Kubernetes at all, if you are already familiarized with it you probably can skip some of the links.&lt;/p>
&lt;p>First of all you will need to know the basic Kubernetes resources, if you are a video fan maybe this video could help you: &lt;a href="https://www.youtube.com/embed/K_Kh4LMiiqQ">&amp;ldquo;From pets to cattle, the way of Kubernetes&amp;rdquo;&lt;/a> (no spam üò¨) but after watching it you will need to get more in depth, for doing so I recommend the book &lt;a href="http://shop.oreilly.com/product/0636920043874.do">&amp;ldquo;Kubernetes: Up and Running&amp;rdquo;&lt;/a>.&lt;/p>
&lt;p>Now that you know the basics probably you will want to test it, you have several ways for doing it: minikube, creating a cluster in GKE, etc&amp;hellip; but if you don&amp;rsquo;t want to bother about it yet, use &lt;a href="https://www.katacoda.com/">Katacoda&lt;/a> and try to finish some of the free Scenarios they have there.&lt;/p>
&lt;p>You are almost there but if you are missing troubleshooting experience because you never administrated a Kubernetes cluster take a look to: &lt;a href="http://shop.oreilly.com/product/0636920064947.do">&amp;ldquo;Kubernetes Cookbook&amp;rdquo;&lt;/a>; this book is pretty focused on pragmatic problems, it will definitely help you in case you need to troubleshoot stuff and try to follow &lt;a href="https://github.com/kelseyhightower/kubernetes-the-hard-way">&amp;ldquo;Kubernetes the hard way&amp;rdquo;&lt;/a> that would help you a lot to understand how to install or fix the Kubernetes components.&lt;/p>
&lt;p>If have read all the previous links but you still want more, take a look to the official documentation at &lt;a href="https://kubernetes.io/">kubernetes.io&lt;/a> to review all the concepts.&lt;/p>
&lt;h2 id="the-day-of-the-exam">The day of the exam&lt;/h2>
&lt;p>Part of my anxiety regarding the exam was that I didn&amp;rsquo;t know what to expect after sitting in my PC at 3pm, what would happen if my browser gets blocked? If I can&amp;rsquo;t understand a question? If I break my cluster? What&amp;rsquo;s going to be my &amp;ldquo;IDE&amp;rdquo;?
I think some of these questions could be easily answered by the Linux Foundation in form of a video explaining how to do the exam, but I couldn&amp;rsquo;t find anything similar so I will try to help you here:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Before the exam, the examiner will ask you yo &lt;strong>clean your desk and drawers&lt;/strong>, completely, I had some books in drawers that were not covered by the cam and I had to move them. I also had an schedule in a wall and I had to unglue it.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &lt;strong>place should be quiet&lt;/strong> because even if you usually work with headphones you will not be allowed to use them.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The examiner will ask you to see all the room, even under the desk.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &lt;strong>examiner will not talk to you by voice, only by chat&lt;/strong>. He/she will hear you because you will need to share the screen and micro. When you do that he will ask you to show open processes et al to be sure you are not copying. I found this a little bit excessive, but&amp;hellip; rules and probably some previous cheaters (shame on you!).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The exam happens in a Chrome tab, the left side will show you the questions and the percentage it covers and you will be able to jump from one to another. All the questions are atomic. The right side is for the shell, I tried to use tmux there, but it was pretty difficult inside a browser terminal. You can also have a popup with notes.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>After running a command in the shell it got blocked and I panicked, I went to my Inbox to write an email to support but luckily after few second (maybe a minute or two but it looked like a long time to me) it went back. I let the examiner know just in case he/she saw me in the email, and that&amp;rsquo;s it.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>You can &lt;strong>only open a tab with kubernetes.io&lt;/strong> and use its search box, no Google. In the past it seems it wasn&amp;rsquo;t like this. It&amp;rsquo;s ok because the answer is usually there, but you need to get used to it, maybe try it out during the preparation.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>It&amp;rsquo;s ok to request a pause&lt;/strong>, but careful because the time doesn&amp;rsquo;t stop.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>You have three hours to finish the exam, &lt;strong>if you get blocked it‚Äôs better to skip&lt;/strong> that question for now and retake it later.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="the-wait">The wait&lt;/h2>
&lt;p>I did the exam last Saturday afternoon, from 3pm to 6pm and when I work up this morning I already had the result in my Inbox so you will not need to wait a lot for it, probably during work days it&amp;rsquo;s going to be even quicker.&lt;/p>
&lt;p>&lt;img src="https://agonzalezro.github.io/devops/thatsall.jpg" alt="that&amp;rsquo;s all folks">&lt;/p>
&lt;p>So, that&amp;rsquo;s it from me.
If you are interested in Kubernetes and you work with it often you will not have any trouble passing the exam, however, I understand that giving the huge range of things that they could ask you the exam can be intimidating, trust yourself and you will be ok!
If you do the exam and this helps you somehow or you just want to let me know anything, &lt;a href="https://twitter.com/agonzalezro">please ping me on @agonzalezro&lt;/a>!&lt;/p></description></item><item><title>Projects I didn't do in 2017</title><link>https://agonzalezro.github.io/posts/projects_2017/</link><pubDate>Sun, 14 Jan 2018 00:00:00 +0000</pubDate><guid>https://agonzalezro.github.io/posts/projects_2017/</guid><description>
&lt;p>If you know me you probably know that I am always complaining that I want to start some pet project that could give me some kind of income.
The income is a nice incentive, but not for the income itself if not because it would be really nice to have somebody paying for a project that you started from scratch.&lt;/p>
&lt;p>In 2017 I had some ideas that after further investigation or after just chatting with some friend about them I decided to not even start or think about them again.&lt;/p>
&lt;p>Why am I sharing them? Because to be fair I don&amp;rsquo;t think I will never start them, also, maybe we can start a good brainstorm here!&lt;/p>
&lt;figure class="left" >
&lt;img src="https://agonzalezro.github.io/lazy-cat.jpg" alt="A lazy cat" />
&lt;figcaption class="center" >Lazy cat proudly brought to you by huffingtonpost&lt;/figcaption>
&lt;/figure>
&lt;h2 id="tool-to-review-tweets">Tool to review Tweets&lt;/h2>
&lt;p>When I was working at Jobandtalent we had several problems deciding what to tweet in the &lt;a href="https://twitter.com/jobandtalentEng">eng account&lt;/a>. This toold could help you to decide what to publish, fix errors on the tweets, etc (as you would do with Github PRs).&lt;/p>
&lt;p>In the future, it should be available as well for Instagram, Facebook, etc..&lt;/p>
&lt;p>Also, it should support bots via API to add comments, for example, about the grammar of the publication.&lt;/p>
&lt;p>I started this one here: &lt;a href="http://chimpin.io/">chimpin.io&lt;/a> but the interest was near to zero.&lt;/p>
&lt;h2 id="adventure-tech-book">Adventure tech book&lt;/h2>
&lt;p>A tech book in the style of &lt;a href="https://en.wikipedia.org/wiki/Choose_Your_Own_Adventure">&amp;ldquo;Choose your own adventure&amp;rdquo;&lt;/a>.&lt;/p>
&lt;p>It would be a book that would immerse you in an adventure where you should take tech decisions: would you use git or rather copy/paste the folder adding a suffix? One of them will end up in dead, you decide.&lt;/p>
&lt;h2 id="search-adventures">Search adventures&lt;/h2>
&lt;p>Something like booking but for activities, ex: I want to do karting in Madrid next Saturday, show me the deals.&lt;/p>
&lt;p>It would scrape the deals from different sources (not sure if it would even be legal, but I didn&amp;rsquo;t give it that much thought).&lt;/p>
&lt;h2 id="track-your-friends">Track your friends&lt;/h2>
&lt;p>I am pretty bad at keeping in touch with my friends/colleagues. This tool will remember you through a simple algorithm when you need to do it! But&amp;hellip; maybe I should fix myself and not use an app like this one üò¨&lt;/p>
&lt;h2 id="status-page">Status page&lt;/h2>
&lt;p>Yet another application that let you know create a status page for your site.
It should be reliable, support theming and have nice graphs about the uptimes.&lt;/p>
&lt;h2 id="logstash-rescuetime">Logstash rescuetime&lt;/h2>
&lt;p>I use &lt;a href="https://www.rescuetime.com/">rescuetime&lt;/a> to track where do I spend my time with the computer. I thought that having that information in logstash would help me to create nice dashboards about my performance.&lt;/p>
&lt;p>Probably I would spend more time creating the nice dashboards than doing real job.&lt;/p>
&lt;h2 id="crypto-present">Crypto present&lt;/h2>
&lt;p>Nice real life packaging for cryptos. Imagine you are going to a birthday and instead of giving a 20 bucks present you give them a nice package with a hash code that represent its crypto? Wouldn&amp;rsquo;t that be nice? (Or not, that' the problem with crypto).&lt;/p>
&lt;h2 id="starter-pack-for-wood">Starter pack for wood&lt;/h2>
&lt;p>Sell packs to start working with wood. For example: a knife + a piece of wood + some instruction to create a spoon. All of it presented in a beautful package.&lt;/p>
&lt;p>The problem with this is that the recurrent users after they have the tools is going to be minimal.&lt;/p>
&lt;h2 id="web-for-creating-real-life-exams">Web for creating real life exams&lt;/h2>
&lt;p>Teachers spend a lot of time preparing their exams, this tool would help them (collaborative) to tag exercises and the time it needs to be done. With a proper base of users they could plug&amp;amp;play the exams.&lt;/p>
&lt;p>Imagine a Spanish teacher that want to do an exam about &amp;ldquo;infinitive form&amp;rdquo;, the tool could show some exercise and he/she will decide what to use and how many do they need depending on the time the exam should take.&lt;/p>
&lt;p>I have some other ideas but they are fully techie so not that interesting for my purpose: ansible vendor tool, a Kubernetes bot for &lt;a href="agonzalezro.github.com/botella">botella&lt;/a> (&lt;a href="https://github.com/agonzalezro/agonzalezro.github.io/blob/kubernetes-for-botella/content/kubernetes/kubernetes-for-botella.md">this one is almost done&lt;/a>, but the usability isn&amp;rsquo;t that good üòÖ), &lt;code>pprof&lt;/code> exporter for Prometheus, ditto for Nats&amp;hellip;&lt;/p></description></item><item><title>How to read a Reader twice</title><link>https://agonzalezro.github.io/posts/tee_reader/</link><pubDate>Sat, 13 Jan 2018 00:00:00 +0000</pubDate><guid>https://agonzalezro.github.io/posts/tee_reader/</guid><description>
&lt;p>Some time ago I read about &lt;a href="https://golang.org/pkg/io/#TeeReader">&lt;code>TeeReader&lt;/code>&lt;/a> but to be fair, I didn&amp;rsquo;t give it that much thought. However, few month back I saw &lt;a href="https://www.youtube.com/watch?v=c5ufcpTGIJM&amp;amp;list=PL64wiCrrxh4Jisi7OcCJIUpguV_f5jGnZ">a video&lt;/a> by &lt;a href="https://twitter.com/francesc">@francesc&lt;/a> and his nice use case and I wrote down a new item in my mental TODO list about things I wanted to use.&lt;/p>
&lt;p>Last week I had the chance to do it; we have a service that requires reading a request body to check for a &lt;code>Status&lt;/code> field and also it requires to store the raw request.&lt;/p>
&lt;p>What we were doing in the first iteration was unmarshalling the full payload into a struct and marshal the struct as the raw data. This process wasn&amp;rsquo;t very reliable because it&amp;rsquo;s pretty easy to lose information in during the un/marshalling.&lt;/p>
&lt;p>To solve it we had two options:&lt;/p>
&lt;ol>
&lt;li>Read all the body, store it in a variable and use that var as raw data and as an input to the &lt;code>Unmarshal&lt;/code> call. Not very neat as you are not taking advantages of the &lt;a href="https://blog.golang.org/json-and-go#TOC_7.">decoding streams&lt;/a>.&lt;/li>
&lt;li>Use the &lt;code>TeeReader&lt;/code>.&lt;/li>
&lt;/ol>
&lt;p>Here is an example (not with real names tho.) of what we end up doing:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Payload&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">Status&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
}
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">getStatusAndReason&lt;/span>(&lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#a6e22e">io&lt;/span>.&lt;span style="color:#a6e22e">Reader&lt;/span>) (&lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">buf&lt;/span> &lt;span style="color:#a6e22e">bytes&lt;/span>.&lt;span style="color:#a6e22e">Buffer&lt;/span>
&lt;span style="color:#a6e22e">tee&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">io&lt;/span>.&lt;span style="color:#a6e22e">TeeReader&lt;/span>(&lt;span style="color:#a6e22e">r&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">buf&lt;/span>)
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">payload&lt;/span> &lt;span style="color:#a6e22e">Payload&lt;/span>
&lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">json&lt;/span>.&lt;span style="color:#a6e22e">NewDecoder&lt;/span>(&lt;span style="color:#a6e22e">tee&lt;/span>).&lt;span style="color:#a6e22e">Decode&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">payload&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">payload&lt;/span>.&lt;span style="color:#a6e22e">Status&lt;/span>, &lt;span style="color:#a6e22e">buf&lt;/span>.&lt;span style="color:#a6e22e">String&lt;/span>(), &lt;span style="color:#a6e22e">err&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>I hope you liked our use case, and in case you would do in any other way, please, &lt;a href="https://twitter.com/agonzalezro">do let me know&lt;/a>! It&amp;rsquo;s always nice learning from your experiences üòÄ&lt;/p></description></item><item><title>Closing 2016, a list of talks I gave</title><link>https://agonzalezro.github.io/posts/2016/</link><pubDate>Sun, 29 Jan 2017 00:00:00 +0000</pubDate><guid>https://agonzalezro.github.io/posts/2016/</guid><description>
&lt;figure class="left" >
&lt;img src="https://agonzalezro.github.io/rafa.jpg" alt="A cow" />
&lt;figcaption class="center" >Thanks @rais38 for the photo!&lt;/figcaption>
&lt;/figure>
&lt;p>We are almost at the end of January but I didn&amp;rsquo;t want to end the first month of the year without doing a small recap of the talks I gave last year.&lt;/p>
&lt;p>When I moved to Spain at the end of 2015 I said to myself that I didn&amp;rsquo;t want to forget the little English I knew so I needed to force myself to keep traveling outside of Spain and to do some public speaking. The public speaking bit is for two reason: keep forcing myself to speak English and&amp;hellip; to lose my fear about talking English in front of a bunch of people you don&amp;rsquo;t know about a tech that they probably know better than you.&lt;/p>
&lt;p>I could do it much better than I did, but I am happy with the results.&lt;/p>
&lt;h2 id="my-english-talks">My English talks&lt;/h2>
&lt;h3 id="custom-volume-plugins--kubeconhttpskubeconio">Custom Volume Plugins @ &lt;a href="https://kubecon.io">Kubecon&lt;/a>&lt;/h3>
&lt;p>&lt;em>&lt;a href="https://www.youtube.com/watch?v=33VzHXuuRs4">Video&lt;/a> &amp;amp; &lt;a href="https://speakerdeck.com/agonzalezro/custom-volume-plugins">slides&lt;/a>&lt;/em>&lt;/p>
&lt;p>I prepared this talk a lot, but I was pretty nervous on stage I did a terrible job. Some people said that they learn a lot of new concepts, but they were just trying to be friendly :) Probably I underestimated the pressure behind a Kubecon talk and I will fix this in the future.&lt;/p>
&lt;h3 id="python-kubernetes-and-friends--pygrunnhttpwwwpygrunnorg">Python, Kubernetes and friends @ &lt;a href="http://www.pygrunn.org/">PyGrunn&lt;/a>&lt;/h3>
&lt;p>&lt;em>&lt;a href="https://www.youtube.com/watch?v=0tsaMVoydDg">Video&lt;/a> &amp;amp; &lt;a href="https://speakerdeck.com/agonzalezro/python-kubernetes-and-friends">Slides&lt;/a>&lt;/em>&lt;/p>
&lt;p>I gave this in the best (IMHO, but I could be biased) Python conference in the Netherlands, it went pretty well, I knew the things I did pretty badly in my previous talk at Kubeconf and I tried to fix the problems. However, if you check the video and you can give me some advice, feel free.&lt;/p>
&lt;h3 id="from-pets-to-cattle-the-way-of-kubernetes">From pets to cattle, the way of Kubernetes&lt;/h3>
&lt;p>&lt;em>&lt;a href="https://www.youtube.com/watch?v=K_Kh4LMiiqQ">Video&lt;/a> &amp;amp; &lt;a href="https://speakerdeck.com/agonzalezro/from-pets-to-cattle-the-way-of-kubernetes">Slides&lt;/a>&lt;/em>&lt;/p>
&lt;p>This talk was in Spain, but since it was a big conference I gave it in English for non-Spanish speakers. I think the talk was ok, I got a 4 out 5 in their feedback tool, but it seems I didn&amp;rsquo;t attach the people because nobody asking anything at the end. Out of camera I got several questions tho.&lt;/p>
&lt;h2 id="and-the-spanish-ones">And the Spanish ones&lt;/h2>
&lt;p>All these talks were internal Jobandtalent talks for my ex-colleagues, I hope it helped them, they definitely helped me, it was a trusty environment and the questions were really interesting. You probably wouldn&amp;rsquo;t ask that much in a conference but it helps the speaker (in this case me) to improve.&lt;/p>
&lt;h3 id="go-101--jobandtalenthttpwwwjobandtalentcom">Go 101 @ &lt;a href="http://www.jobandtalent.com/">Jobandtalent&lt;/a>&lt;/h3>
&lt;p>&lt;em>&lt;a href="https://www.youtube.com/watch?v=zaywpuLV4BY">Video&lt;/a> &amp;amp; &lt;a href="https://speakerdeck.com/agonzalezro/go-101-updated">Slides&lt;/a>&lt;/em>&lt;/p>
&lt;h3 id="kubernetes-101--jobandtalenthttpwwwjobandtalentcom">Kubernetes 101 @ &lt;a href="http://www.jobandtalent.com/">Jobandtalent&lt;/a>&lt;/h3>
&lt;p>&lt;em>&lt;a href="https://www.youtube.com/watch?v=5YmhMM_q4uI">Video&lt;/a> &amp;amp; &lt;a href="https://speakerdeck.com/agonzalezro/kubernetes-101">Slides&lt;/a>&lt;/em>&lt;/p>
&lt;h3 id="docker-101--jobandtalenthttpwwwjobandtalentcom">Docker 101 @ &lt;a href="http://www.jobandtalent.com/">Jobandtalent&lt;/a>&lt;/h3>
&lt;p>&lt;em>&lt;a href="https://speakerdeck.com/agonzalezro/docker-101">Slides&lt;/a>&lt;/em>&lt;/p>
&lt;p>Out of that list I gave some other, for example, about &lt;a href="https://github.com/agonzalezro/goqui/blob/master/examples/neo4j_intro_slides.neo4j">Neo4J&lt;/a> and a workshop with my friend &lt;a href="https://twitter.com/ipedrazas">@ipedrazas&lt;/a> about Kubernetes &amp;amp; Docker, here, in Spain. Also, I started &lt;a href="https://meetup.com/mad-scalability">mad Scalability&lt;/a> and I am quite happy with about it!&lt;/p>
&lt;p>I will try to prepare some CFP in 2017, but as today I see it pretty difficult because of reasons :)&lt;/p>
&lt;p>As I said at the beginning of the post, one of the reasons why I tried to do public speaking is to improve at it, you if you have any advice &lt;a href="https://twitter.com/agonzalezro">share it with me&lt;/a> please!&lt;/p></description></item><item><title>Scheduling Your Kubernetes Pods With Elixir</title><link>https://agonzalezro.github.io/posts/elixir-scheduler/</link><pubDate>Mon, 16 Jan 2017 00:00:00 +0000</pubDate><guid>https://agonzalezro.github.io/posts/elixir-scheduler/</guid><description>
&lt;blockquote>
&lt;p>This was originally posted on &lt;a href="https://deis.com/blog/2016/scheduling-your-kubernetes-pods-with-elixir/">deis.com&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://twitter.com/kelseyhightower">Kelsey Hightower&lt;/a> gave a really interesting talk at &lt;a href="https://skillsmatter.com/conferences/7208-containersched-2015">ContainerSched&lt;/a> about how to create your own scheduler using the Kubernetes HTTP API.&lt;/p>
&lt;p>The talk was awesome. It&amp;rsquo;s incredible to see what kind of things you can do with a base system as good as Kubernetes.&lt;/p>
&lt;p>However, I missed one thing. The &lt;a href="https://github.com/kelseyhightower/scheduler">example&lt;/a> provided by Kelsey was a Go application. Which is the main language used with Kubernetes. So, if you look at that code without any context, you might think it&amp;rsquo;s using some kind of Kubernetes internal packages. But it&amp;rsquo;s not! It&amp;rsquo;s a standalone piece of code that happens to make some HTTP calls.&lt;/p>
&lt;p>To illustrate this point, I decided to write my own scheduler, in a different language. In my case, &lt;a href="http://elixir-lang.org/">Elixir&lt;/a>, because that&amp;rsquo;s the language I happen to be learning at the moment.&lt;/p>
&lt;p>This post isn&amp;rsquo;t an intro to Elixir, but the code should be easy to follow.&lt;/p>
&lt;p>Also, I&amp;rsquo;m going to use &lt;code>localhost&lt;/code> when accessing the Kubernetes API. Why? For simplicity. If we run &lt;code>kubectl proxy&lt;/code> on a computer connected to the Kubernetes master, we will not need to deal with authorization, hosts, and so on. The &lt;code>proxy&lt;/code> command will do it for us.&lt;/p>
&lt;p>So, let&amp;rsquo;s dive in.&lt;/p>
&lt;h2 id="get-a-list-of-unscheduled-jobs">Get a List of Unscheduled Jobs&lt;/h2>
&lt;p>To start off with, we need a pod for our scheduler to schedule.&lt;/p>
&lt;p>By default, Kubernetes will schedule all your pods. So, we need to create a unscheduled pod and we need to indicate to Kubernetes that we don&amp;rsquo;t want our pod to get scheduled.&lt;/p>
&lt;p>So, create a file called &lt;code>pod.yml&lt;/code> and put this inside:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Pod&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">custom&lt;/span>
&lt;span style="color:#f92672">annotations&lt;/span>:
&lt;span style="color:#f92672">scheduler.alpha.kubernetes.io/name&lt;/span>: &lt;span style="color:#ae81ff">myOwnScheduler&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">containers&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;nginx&amp;#34;&lt;/span>
&lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;nginx:1.10.0&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Notice the &lt;code>scheduler.alpha.kubernetes.io/name&lt;/code> annotation we use to specify that our scheduler (that we call &lt;code>myOwnScheduler&lt;/code>) will be handling this pod.&lt;/p>
&lt;p>Now, let&amp;rsquo;s create the pod from the definition file:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl create -f pod.yml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>After you&amp;rsquo;ve done this, there will be an unscheduled job waiting for us inside Kubernetes. Why unscheduled? Because our pod says it wants to be scheduled by the &lt;code>myOwnScheduler&lt;/code> scheduler, but we&amp;rsquo;ve not created it yet, so Kubernetes can&amp;rsquo;t schedule it.&lt;/p>
&lt;p>So, let&amp;rsquo;s build our scheduler.&lt;/p>
&lt;p>First, our scheduler must be able to grab this unscheduled job from the API.&lt;/p>
&lt;p>Here&amp;rsquo;s the function I wrote to do that:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-elixir" data-lang="elixir">&lt;span style="color:#66d9ef">def&lt;/span> unscheduled_pods &lt;span style="color:#66d9ef">do&lt;/span>
is_managed_by_us &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>(get_in(&amp;amp;1, [&lt;span style="color:#e6db74">&amp;#34;metadata&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;annotations&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;scheduler.alpha.kubernetes.io/name&amp;#34;&lt;/span>]) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">@name&lt;/span>)
resp &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">HTTPoison&lt;/span>&lt;span style="color:#f92672">.&lt;/span>get! &lt;span style="color:#e6db74">&amp;#34;http://127.0.0.1:8001/api/v1/pods?fieldSelector=spec.nodeName=&amp;#34;&lt;/span>
resp&lt;span style="color:#f92672">.&lt;/span>body
&lt;span style="color:#f92672">|&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">Poison&lt;/span>&lt;span style="color:#f92672">.&lt;/span>decode!
&lt;span style="color:#f92672">|&amp;gt;&lt;/span> get_in([&lt;span style="color:#e6db74">&amp;#34;items&amp;#34;&lt;/span>])
&lt;span style="color:#f92672">|&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">Enum&lt;/span>&lt;span style="color:#f92672">.&lt;/span>filter(is_managed_by_us)
&lt;span style="color:#f92672">|&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">Enum&lt;/span>&lt;span style="color:#f92672">.&lt;/span>map(&lt;span style="color:#f92672">&amp;amp;&lt;/span>(get_in(&amp;amp;1, [&lt;span style="color:#e6db74">&amp;#34;metadata&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>])))
&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>As you can see we are using &lt;code>127.0.0.1&lt;/code> to query our API, this is posible thanks to the &lt;code>kubectl proxy&lt;/code> command we mentioned in the intro.&lt;/p>
&lt;p>This code grabs the name of all the pods that are waiting to be scheduled inside Kubernetes. It then uses the &lt;code>is_managed_by_us&lt;/code> function to see whether the &lt;code>@name&lt;/code> attribute is set to &lt;code>myOwnScheduler&lt;/code>. If this is true, the pod has indicated that it should be managed by our scheduler.&lt;/p>
&lt;h2 id="an-elixir-introduction">An Elixir Introduction&lt;/h2>
&lt;p>I said I wouldn&amp;rsquo;t explain Elixir, but I will just comment on three piece of syntax.&lt;/p>
&lt;p>The &lt;code>|&amp;gt;&lt;/code> in the code above is a pipe, like the &lt;code>|&lt;/code> character from a shell script. Using this passes the result from the left side as a parameter to the function on the right side. In this way return values can be piped through functions.&lt;/p>
&lt;p>The &lt;code>&amp;amp;&lt;/code> character marks an &lt;a href="https://en.wikipedia.org/wiki/Anonymous_function">anonymous function&lt;/a>, i.e. a function that we define inline as an expression. And &lt;code>&amp;amp;1&lt;/code> refers the first parameter received by the function.&lt;/p>
&lt;p>We can also use an anonymous function as parameter to another function. As we are doing, in the &lt;code>map&lt;/code> call.&lt;/p>
&lt;h2 id="get-a-list-of-available-nodes">Get a List of Available Nodes&lt;/h2>
&lt;p>Our &lt;code>unscheduled_pods&lt;/code> function gets us a list of pods that have not been scheduled yet. So next up, we can bind them to our nodes. That is, we tell our containers to run on particular nodes.&lt;/p>
&lt;p>But wait, how do we know what nodes are available?&lt;/p>
&lt;p>We&amp;rsquo;ll need to grab those as well, like this:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-elixir" data-lang="elixir">&lt;span style="color:#66d9ef">def&lt;/span> nodes &lt;span style="color:#66d9ef">do&lt;/span>
resp &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">HTTPoison&lt;/span>&lt;span style="color:#f92672">.&lt;/span>get! &lt;span style="color:#e6db74">&amp;#34;http://127.0.0.1:8001/api/v1/nodes&amp;#34;&lt;/span>
resp&lt;span style="color:#f92672">.&lt;/span>body
&lt;span style="color:#f92672">|&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">Poison&lt;/span>&lt;span style="color:#f92672">.&lt;/span>decode!
&lt;span style="color:#f92672">|&amp;gt;&lt;/span> get_in([&lt;span style="color:#e6db74">&amp;#34;items&amp;#34;&lt;/span>])
&lt;span style="color:#f92672">|&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">Enum&lt;/span>&lt;span style="color:#f92672">.&lt;/span>map(&lt;span style="color:#f92672">&amp;amp;&lt;/span>(get_in(&amp;amp;1, [&lt;span style="color:#e6db74">&amp;#34;metadata&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>])))
&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This code will return a list of all nodes.&lt;/p>
&lt;p>We could potentially request a lot more information from the API at this point, but for what we&amp;rsquo;re building, it&amp;rsquo;s not necessary. If you want to now what extra information is available, &lt;a href="http://kubernetes.io/kubernetes/third_party/swagger-ui/#!/api%2Fv1/listNamespacedNode">check the documentation for this endpoint&lt;/a>.&lt;/p>
&lt;h2 id="the-bind-function">The Bind Function&lt;/h2>
&lt;p>So let&amp;rsquo;s review.&lt;/p>
&lt;p>We have a list of all the unscheduled jobs that we are supposed to manage. And we have a list of all the nodes we can schedule jobs to.&lt;/p>
&lt;p>But how do we actually schedule a pods on a node?&lt;/p>
&lt;p>We call the bind endpoint, like this:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-elixir" data-lang="elixir">&lt;span style="color:#66d9ef">def&lt;/span> bind(pod_name, node_name) &lt;span style="color:#66d9ef">do&lt;/span>
url &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;http://127.0.0.1:8001/api/v1/namespaces/default/pods/&lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>pod&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/binding&amp;#34;&lt;/span>
payload &lt;span style="color:#f92672">=&lt;/span> %{
&lt;span style="color:#e6db74">&amp;#34;apiVersion&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;v1&amp;#34;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;kind&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Binding&amp;#34;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;metadata&amp;#34;&lt;/span>: %{
&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>: pod_name,
},
&lt;span style="color:#e6db74">&amp;#34;target&amp;#34;&lt;/span>: %{
&lt;span style="color:#e6db74">&amp;#34;apiVersion&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;v1&amp;#34;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;kind&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Node&amp;#34;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>: node_name,
}
}
headers &lt;span style="color:#f92672">=&lt;/span> [{&lt;span style="color:#e6db74">&amp;#39;content-type&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;application/json&amp;#39;&lt;/span>}]
&lt;span style="color:#a6e22e">HTTPoison&lt;/span>&lt;span style="color:#f92672">.&lt;/span>post! url, payload &lt;span style="color:#f92672">|&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">Poison&lt;/span>&lt;span style="color:#f92672">.&lt;/span>encode!, headers
&lt;span style="color:#a6e22e">IO&lt;/span>&lt;span style="color:#f92672">.&lt;/span>puts &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>pod_name&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> pod scheduled in &lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>node_name&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>But before we can use this function, we need a scheduling strategy.&lt;/p>
&lt;h2 id="scheduling-strategy">Scheduling Strategy&lt;/h2>
&lt;p>For our simple scheduler, we will go with a random scheduling strategy.&lt;/p>
&lt;p>In effect, we schedule each pod on a random node. Multiple pods might even end up on the same node.&lt;/p>
&lt;p>Here&amp;rsquo;s how we do that:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-elixir" data-lang="elixir">&lt;span style="color:#66d9ef">def&lt;/span> schedule(pods) &lt;span style="color:#66d9ef">do&lt;/span>
pods
&lt;span style="color:#f92672">|&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">Enum&lt;/span>&lt;span style="color:#f92672">.&lt;/span>each(&lt;span style="color:#f92672">&amp;amp;&lt;/span>(bind(&amp;amp;1, &lt;span style="color:#a6e22e">Enum&lt;/span>&lt;span style="color:#f92672">.&lt;/span>random(nodes))))
&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Of course, this is very basic, and there are much better ways to maximise the resources we have available to us. But we&amp;rsquo;re building this as a learning exercise. Feel free to extend this code if you want to take things further.&lt;/p>
&lt;p>Some ideas to get you going:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Round-robin_scheduling">Round-robin&lt;/a> pod scheduling.&lt;/li>
&lt;li>Implement your own version of Kubernete&amp;rsquo;s load-aware scheduling.&lt;/li>
&lt;li>Annotate the pods with some extra information, for example: cluster.type: raspberry if you want to send them to the Raspberry Pi nodes in your cluster.&lt;/li>
&lt;li>You could use some external source of truth, e.g. Nagios, to determine which nodes to schedule jobs on.&lt;/li>
&lt;/ul>
&lt;h2 id="putting-everything-together">Putting Everything Together&lt;/h2>
&lt;p>Now we have everything in place, a &lt;code>main&lt;/code> function is all that&amp;rsquo;s needed:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-elixir" data-lang="elixir">&lt;span style="color:#66d9ef">def&lt;/span> main(_args) &lt;span style="color:#66d9ef">do&lt;/span>
unscheduled_pods
&lt;span style="color:#f92672">|&amp;gt;&lt;/span> schedule
&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now you are able to run your program!&lt;/p>
&lt;p>A simple &lt;code>elixir your_script.exs&lt;/code> should do it, if you have all the dependencies. But you probably don&amp;rsquo;t, so I recommend you follow the Usage section in &lt;a href="https://github.com/agonzalezro/escheduler#usage">the README&lt;/a> for the code that accompanies this post.&lt;/p>
&lt;h2 id="wrap-up">Wrap Up&lt;/h2>
&lt;p>For a most things, you probably don&amp;rsquo;t want to write your own scheduler. The one provided by Kubernetes is good for so many things.&lt;/p>
&lt;p>But if you want to do something the default Kubernetes scheduler can&amp;rsquo;t do, it&amp;rsquo;s not as difficult as you might think to write your own and slot it in, and continue to take advantage of everything Kubernetes has to offer.&lt;/p>
&lt;p>I&amp;rsquo;ve put my code up for &lt;a href="https://github.com/agonzalezro/escheduler">my Elixir scheduler&lt;/a>, on GitHub in case you want to check it out. This repository has everything you need to follow along with this post, from the YAML pod definition to the scheduler itself.&lt;/p></description></item><item><title>Save hook for major modes</title><link>https://agonzalezro.github.io/posts/save-hook/</link><pubDate>Thu, 05 May 2016 00:00:00 +0000</pubDate><guid>https://agonzalezro.github.io/posts/save-hook/</guid><description>
&lt;p>One of the things I like the most about Go is its &lt;code>go fmt&lt;/code> tool. I don&amp;rsquo;t worry about formatting my code while I am writing it because I know that &lt;code>fmt&lt;/code> is going to be there and it will do the work for me later.&lt;/p>
&lt;p>Said that, the Go layer for Spacemacs is the one that is going to run it for you. Sometimes we need to deal with languages that don&amp;rsquo;t have this functionality, in my case, I found this issue working with Elixir &amp;amp; Ruby (happily Python forces you to write well :D).&lt;/p>
&lt;p>Since I got really used to the &lt;code>fmt&lt;/code> tool I wanted a similar solution for those languages and it seems that a simple auto indentation all over the file could do it for me. How did I add this behaviour for those languages? Just adding this to my &lt;a href="https://github.com/syl20bnr/spacemacs/blob/master/doc/DOCUMENTATION.org#alternative-setup">&lt;code>init.el&lt;/code>&lt;/a>:&lt;/p>
&lt;pre>&lt;code>(defun indent-some-languages()
(case major-mode
((elixir-mode ruby-mode) (spacemacs/indent-region-or-buffer))))
(defun dotspacemacs/user-config ()
...
(add-hook 'before-save-hook 'indent-some-languages)
)
&lt;/code>&lt;/pre>
&lt;p>What I am doing there is registering a new hook just before saving the file that will check if I am in Ruby or Elixir mode and in that case call &lt;code>spacemacs/indent-region-or-buffer&lt;/code> that will indent the whole file for me.&lt;/p>
&lt;p>If you are familiarised with Lisp this snippet will probably look pretty simple to you; but trust me, it took me a while to make it work. This is the reason why I thought it could be interesting to share it.&lt;/p>
&lt;p>I would love to know your tricks for Spacemacs, share them with me here or at &lt;a href="https://twitter.com/agonzalezro">@agonzalezro&lt;/a>.&lt;/p></description></item><item><title>Key bindings for Spacemacs</title><link>https://agonzalezro.github.io/posts/key_bindings/</link><pubDate>Mon, 02 May 2016 00:00:00 +0000</pubDate><guid>https://agonzalezro.github.io/posts/key_bindings/</guid><description>
&lt;p>I am a happy user of &lt;a href="http://spacemacs.org/">Spacemacs&lt;/a> since few months ago. I was (and I still am) a vim user but Spacemacs provide you extremely good defaults and the installation of layers isn&amp;rsquo;t painful at all, things that I sadly can&amp;rsquo;t say about vim.&lt;/p>
&lt;p>I ended up with a lot of configuration on &lt;a href="https://github.com/agonzalezro/.dot">my dot files&lt;/a> and everytime I wanted to try, for example, a new language, it was difficult to get it working well.&lt;/p>
&lt;p>So, now that you know why I did the change let me show you the key bindings that I find useful:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>Please, share yours with me! &lt;a href="https://twitter.com/agonzalezro">@agonzalezro&lt;/a> or leave a comment :)&lt;/p>
&lt;p>PS: if you are starting in development I would start with Atom or some other editor. I moved from vim to Spacemacs because 1) I already knew some vim &amp;amp; 2) it works in terminal, and this is a must for me since I am a heavy user of tmux too.&lt;/p></description></item><item><title>Signing your GitHub work with your Keybase keys</title><link>https://agonzalezro.github.io/posts/keybase/</link><pubDate>Wed, 06 Apr 2016 00:00:00 +0000</pubDate><guid>https://agonzalezro.github.io/posts/keybase/</guid><description>
&lt;p>As you may know, yesterday, &lt;a href="https://github.com/blog/2144-gpg-signature-verification">GitHub has presented a way to verify your commits&lt;/a> on their platform. This is not something new, it&amp;rsquo;s part of the git protocol, but now, they will show a fancy &amp;ldquo;verified&amp;rdquo; label everytime you push a signed commit. Cool? Yeah, pretty cool.&lt;/p>
&lt;p>One of the problems I always had since I know GPG is to keep my keys locally. I am pretty sure that some other people take care of their keys as if they were part of their family, but I didn&amp;rsquo;t feel that need yet. &lt;a href="https://keybase.io/">Keybase&lt;/a> partially solved this problem for me, let&amp;rsquo;s hope it did it for you as well (ask me for an invite if you don&amp;rsquo;t have one yet).&lt;/p>
&lt;p>&lt;em>I want to start this article with a disclaimer, I am not a security professional or anything even closer to it; so, if you think I am saying anything stupid, please, do let me know. Also, if you are a heavy user of Keybase, take my steps carefully because I don&amp;rsquo;t know if you account will continue being usable by Keybase (I would expect so, but a disclaimer is always good).&lt;/em>&lt;/p>
&lt;p>&lt;strong>What do we need to do then?&lt;/strong> Imagine that you are myself and you don&amp;rsquo;t have &lt;code>keybase&lt;/code> installed yet, also, you have a Mac:&lt;/p>
&lt;pre>&lt;code>brew install keybase
&lt;/code>&lt;/pre>
&lt;p>Now go to your Keybase account and download the public and private key, if you don&amp;rsquo;t know how to do it, follow &lt;a href="http://www.keybits.net/2016/02/import-keybase-private-key/">this tutorial by Tom Atkins&lt;/a>. Summarising it:&lt;/p>
&lt;ol>
&lt;li>Go to your Keybase account.&lt;/li>
&lt;li>Click on your key fingerprint and copy/paste that on a file.&lt;/li>
&lt;li>Click on &amp;ldquo;edit&amp;rdquo;, then &amp;ldquo;export my private key&amp;rdquo; and copy/paste that as well in a different file.&lt;/li>
&lt;li>Now, &lt;code>gpg --allow-secret-key-import --import keybase-private.key&lt;/code>.&lt;/li>
&lt;li>And, &lt;code>gpg --import keybase-public.key&lt;/code>.&lt;/li>
&lt;/ol>
&lt;p>You are good to go now.&lt;/p>
&lt;p>The problem that you will face trying to use your Keybase account is that your email address will look something like &lt;code>username@keybase.io&lt;/code> and you can not verify that account on github. For that reasonwe will need to update our key for adding your normal account email and delete the keybase one.&lt;/p>
&lt;p>So, let&amp;rsquo;s add your normal account:&lt;/p>
&lt;pre>&lt;code># alex @ Alexs-MacBook-Pro in ~/Desktop [18:14:34]
$ gpg --edit-key agonzalezro@keybase.io
...
gpg&amp;gt; adduid
Real name: Alexandre Gonz√°lez Rodr√≠guez
Email address: agonzalezro@gmail.com
Comment:
You are using the `utf-8' character set.
You selected this USER-ID:
&amp;quot;Alexandre Gonz√°lez Rodr√≠guez &amp;lt;agonzalezro@gmail.com&amp;gt;&amp;quot;
Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? o
You need a passphrase to unlock the secret key for
user: &amp;quot;keybase.io/agonzalezro &amp;lt;agonzalezro@keybase.io&amp;gt;&amp;quot;
4096-bit RSA key, ID 68C84A97, created 2014-03-11
pub 4096R/68C84A97 created: 2014-03-11 expires: 2024-03-08 usage: SCEA
trust: unknown validity: unknown
sub 4096R/74F6172C created: 2014-03-11 expires: 2024-03-08 usage: SEA
[ unknown] (1) keybase.io/agonzalezro &amp;lt;agonzalezro@keybase.io&amp;gt;
[ unknown] (2). Alexandre Gonz√°lez Rodr√≠guez &amp;lt;agonzalezro@gmail.com&amp;gt;
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Update: Chris Miller showed me on the comments that this step is not really needed, so don&amp;rsquo;t delete you key, just write &lt;code>q&lt;/code> to exit and save the changes.&lt;/strong>&lt;/p>
&lt;p>And delete the &lt;code>keybase.io&lt;/code> one:&lt;/p>
&lt;pre>&lt;code>...
gpg&amp;gt; 1
pub 4096R/68C84A97 created: 2014-03-11 expires: 2024-03-08 usage: SCEA
trust: unknown validity: unknown
sub 4096R/74F6172C created: 2014-03-11 expires: 2024-03-08 usage: SEA
[ unknown] (1). Alexandre Gonz√°lez Rodr√≠guez &amp;lt;agonzalezro@gmail.com&amp;gt;
[ unknown] (2)* keybase.io/agonzalezro &amp;lt;agonzalezro@keybase.io&amp;gt;
gpg&amp;gt; deluid
Really remove this user ID? (y/N) y
pub 4096R/68C84A97 created: 2014-03-11 expires: 2024-03-08 usage: SCEA
trust: unknown validity: unknown
sub 4096R/74F6172C created: 2014-03-11 expires: 2024-03-08 usage: SEA
[ unknown] (1). Alexandre Gonz√°lez Rodr√≠guez &amp;lt;agonzalezro@gmail.com&amp;gt;
gpg&amp;gt; q
Save changes? (y/N) y
&lt;/code>&lt;/pre>&lt;p>What we did there on the first line was select the account &lt;code>keybase.io&lt;/code>, please, check the number associated with your &lt;code>keybase.io&lt;/code> account, don&amp;rsquo;t press &lt;code>1&lt;/code> just for the sake of it.&lt;/p>
&lt;p>You have everything you need now, so you just need to export your key and &lt;a href="https://github.com/settings/keys">import it on github&lt;/a>:&lt;/p>
&lt;pre>&lt;code>gpg --armor --export agonzalezro@gmail.com
&lt;/code>&lt;/pre>&lt;p>PS: &lt;code>pbcopy&lt;/code> is your friend here if you are using Mac :)&lt;/p>
&lt;p>The only thing you need to do now is sign a commit, do that with &lt;code>git commit -S&lt;/code> and after pushing you will have this beautiful &amp;ldquo;label&amp;rdquo; close to your commit.&lt;/p>
&lt;p>&lt;a href="https://github.com/agonzalezro/agonzalezro.github.io/commits/polo">&lt;img src="https://agonzalezro.github.io/github_verified_commit.png" alt="github verified commit">&lt;/a>&lt;/p>
&lt;p>I hope that you enjoyed the tutorial, let me know on the comments or on twitter (&lt;a href="https://twitter.com/agonzalezro">@agonzalezro&lt;/a>) if something I do is stupid or if you have found it useful!&lt;/p></description></item><item><title>Using Kong with Kubernetes</title><link>https://agonzalezro.github.io/posts/kong-k8s/</link><pubDate>Thu, 17 Dec 2015 00:00:00 +0000</pubDate><guid>https://agonzalezro.github.io/posts/kong-k8s/</guid><description>
&lt;blockquote>
&lt;p>This was originally posted on &lt;a href="http://k8s.uk/using-kong-with-kubernetes.html">k8s.uk&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;p>If you don&amp;rsquo;t know about &lt;a href="https://getkong.org">Kong&lt;/a> yet, you should take a look. It&amp;rsquo;s an Open Source API Gateway, they define themselves as: &amp;ldquo;The open-source management layer for APIs, delivering high performance and reliability.&amp;rdquo; and they are quite right.&lt;/p>
&lt;p>I was playing with Kong lately at work (&lt;a href="http://jobandtalent.com">jobandtalent.com&lt;/a>, we are hiring!) and I think that it could be pretty awesome as a entry layer to your microservices platform running in Kubernetes.&lt;/p>
&lt;p>For the sake of simplicity I will not run Kong in Kubernetes, but it shouldn&amp;rsquo;t be so difficult since &lt;a href="https://getkong.org/install/">they already provide Docker images&lt;/a>. Also, running Kong on the same cluster you will be able to use internal networking between pods: win-win.&lt;/p>
&lt;p>So, what will I show?&lt;/p>
&lt;ul>
&lt;li>I will deploy a Kubernetes with 2 pods (our 2 microservices) &amp;amp;&lt;/li>
&lt;li>I will install Kong locally and configure it to point to this 2 services.&lt;/li>
&lt;/ul>
&lt;h2 id="go--packing">Go &amp;amp; packing&lt;/h2>
&lt;p>I&amp;rsquo;ve created a small Go app that will show the value of an environment variable when you &lt;code>GET /&lt;/code>:&lt;/p>
&lt;pre>&lt;code>package main
import (
&amp;quot;fmt&amp;quot;
&amp;quot;log&amp;quot;
&amp;quot;net/http&amp;quot;
&amp;quot;os&amp;quot;
)
func main() {
http.HandleFunc(&amp;quot;/&amp;quot;, func(w http.ResponseWriter, r *http.Request) {
fmt.Fprintf(w, os.Getenv(&amp;quot;TEST_RESULT&amp;quot;))
})
log.Fatal(http.ListenAndServe(&amp;quot;:8080&amp;quot;, nil))
}
&lt;/code>&lt;/pre>
&lt;p>Now we will build the application to later pack it in our image. Remember that if you are in Mac you will need to cross-compile the app to work on Linux:&lt;/p>
&lt;pre>&lt;code>$ GOOS=linux go build
&lt;/code>&lt;/pre>
&lt;p>We can pack it into our images now. For doing so we need a &lt;code>Dockerfile&lt;/code>. It&amp;rsquo;s a simple binary, so the &lt;code>Dockerfile&lt;/code> is not complex at all:&lt;/p>
&lt;pre>&lt;code>FROM scratch
ADD app /
ENTRYPOINT [&amp;quot;/app&amp;quot;]
&lt;/code>&lt;/pre>
&lt;p>Cool! What can we do now with our shiny image? Yes, you are right! Push it to the hub:&lt;/p>
&lt;pre>&lt;code>$ docker build -t agonzalezro/kong-test .
$ docker push agonzalezro/kong-test
&lt;/code>&lt;/pre>
&lt;h2 id="k8s">k8s&lt;/h2>
&lt;p>We have our image on the registry and all we need now is running it on Kubernetes. I am using &lt;a href="https://cloud.google.com/container-engine/">Google Container Engine&lt;/a> for deploying this, but you can use whatever you prefer.&lt;/p>
&lt;p>Let&amp;rsquo;s create our RCs &amp;amp; services:&lt;/p>
&lt;pre>&lt;code># rc1.yml
apiVersion: v1
kind: ReplicationController
metadata:
name: api1
spec:
selector:
name: api
version: first
template:
metadata:
labels:
name: api
version: first
spec:
containers:
- name: app
image: agonzalezro/kong-test
env:
- name: TEST_RESULT
value: &amp;quot;This is the first app&amp;quot;
# rc2.yml
apiVersion: v1
kind: ReplicationController
metadata:
name: api2
spec:
selector:
name: api
version: second
template:
metadata:
labels:
name: api
version: second
spec:
containers:
- name: app
image: agonzalezro/kong-test
env:
- name: TEST_RESULT
value: &amp;quot;Second!&amp;quot;
# svc1.yml
apiVersion: v1
kind: Service
metadata:
name: app1-svc
spec:
type: LoadBalancer
ports:
- port: 80
targetPort: 8080
selector:
name: api
version: first
# svc2.yml
apiVersion: v1
kind: Service
metadata:
name: app2-svc
spec:
type: LoadBalancer
ports:
- port: 80
targetPort: 8080
selector:
name: api
version: second
&lt;/code>&lt;/pre>
&lt;p>And now run it:&lt;/p>
&lt;pre>&lt;code>$ kubectl create -f rc1.yml -f rc2.yml -f svc1.yml -f svc2.yml
&lt;/code>&lt;/pre>
&lt;p>Wait for the service and the pods to be ready and check their IPS:&lt;/p>
&lt;pre>&lt;code>$ kubectl get services
NAME CLUSTER_IP EXTERNAL_IP PORT(S) SELECTOR AGE
app1-svc 10.159.242.86 130.211.89.175 80/TCP name=api,version=first 17m
app2-svc 10.159.246.93 104.155.53.175 80/TCP name=api,version=second 17m
kubernetes 10.159.240.1 &amp;lt;none&amp;gt; 443/TCP &amp;lt;none&amp;gt; 1h
&lt;/code>&lt;/pre>
&lt;h2 id="kong">Kong&lt;/h2>
&lt;p>Follow the instruction here: &lt;a href="https://getkong.org/install/docker/">https://getkong.org/install/docker/&lt;/a> to install Kong locally.&lt;/p>
&lt;p>Yeah! We have it up &amp;amp; running so let&amp;rsquo;s point it to our shinny cluster. We need to use Kong API for that (port &lt;code>:8001&lt;/code>):&lt;/p>
&lt;pre>&lt;code>$ http http://dockerhost:8001/apis/ name=first upstream_url=http://130.211.89.175 request_path=/first strip_request_path=true
$ http http://dockerhost:8001/apis/ name=second upstream_url=http://104.155.53.175 request_path=/second strip_request_path=true
&lt;/code>&lt;/pre>
&lt;p>What we did here? We set up two new endpoints &lt;code>/first&lt;/code> &amp;amp; &lt;code>/second&lt;/code> that are pointing to the both Kubernetes services previously created. We could have done it with DNS as well using &lt;code>request_host&lt;/code> instead.&lt;/p>
&lt;p>Lets call Kong on the port &lt;code>:8000&lt;/code> to use them:&lt;/p>
&lt;pre>&lt;code>$ http http://dockerhost:8000/first
HTTP/1.1 200 OK
Connection: keep-alive
Content-Length: 21
Content-Type: text/plain; charset=utf-8
Date: Thu, 17 Dec 2015 21:43:41 GMT
Via: kong/0.5.4
This is the first app
$ http http://dockerhost:8000/second
HTTP/1.1 200 OK
Connection: keep-alive
Content-Length: 7
Content-Type: text/plain; charset=utf-8
Date: Thu, 17 Dec 2015 21:43:44 GMT
Via: kong/0.5.4
Second!
&lt;/code>&lt;/pre>
&lt;p>\o/ We did it!&lt;/p>
&lt;h2 id="next-steps">Next steps&lt;/h2>
&lt;p>You have Kong pointed to your cluster, now it&amp;rsquo;s up to your imagination what to do next. I would say try to configure some rate limiting or auth, it&amp;rsquo;s deadly simply. Check them here: &lt;a href="https://getkong.org/plugins/">https://getkong.org/plugins/&lt;/a>&lt;/p>
&lt;p>If you have any question or you want to discuss this further let me know at &lt;a href="https://twitter.com/agonzalezro">@agonzalezro&lt;/a>.&lt;/p></description></item><item><title>Kubernetes volume plugins and Flocker</title><link>https://agonzalezro.github.io/posts/k8s_flocker_plugin/</link><pubDate>Tue, 20 Oct 2015 00:00:00 +0000</pubDate><guid>https://agonzalezro.github.io/posts/k8s_flocker_plugin/</guid><description>
&lt;p>Last month I was working with the guys from &lt;a href="http://www.jetstack.io/">Jetstack&lt;/a> &amp;amp; &lt;a href="https://clusterhq.com/">ClusterHQ&lt;/a> developing a plugina for Kubernetes that will allow the people to easily use &lt;a href="https://clusterhq.com/flocker/introduction/">Flocker&lt;/a> there.&lt;/p>
&lt;p>Yesterday I had the pleasure of sharing the stage with &lt;a href="https://twitter.com/Rimusz">Rimas Mocevicius&lt;/a>, &lt;a href="https://twitter.com/kelseyhightower">Kelsey Hightower&lt;/a> &amp;amp; &lt;a href="https://twitter.com/ipedrazas">Ivan Pedrazas&lt;/a> at the &lt;a href="http://www.meetup.com/Kubernetes-London/events/226026848/">Kubernetes London meetup&lt;/a> to present the plugin and show the audience that creating volume plugins for Kubernetes is easier than it looks at the first glance.&lt;/p>
&lt;p>As an introduction of what you will find:&lt;/p>
&lt;ol>
&lt;li>Introduction to Flocker&lt;/li>
&lt;li>Introduction to Kubernetes&lt;/li>
&lt;li>Introduction to the plugin itself&lt;/li>
&lt;li>Code&lt;/li>
&lt;li>Summary&lt;/li>
&lt;/ol>
&lt;p>Here they are:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>Also, if you want to take a look to the presenter notes or the original slides, I have them in a GitHub repo: &lt;a href="https://github.com/agonzalezro/slides/tree/master/k8s_flocker_plugin">https://github.com/agonzalezro/slides/tree/master/k8s_flocker_plugin&lt;/a>&lt;/p>
&lt;p>Feel free to contact me if you have any questions! I am &lt;a href="https://twitter.com/agoznalezro">agonzalezro in twitter&lt;/a>.&lt;/p></description></item><item><title>How to deploy and update a python app using Kubernetes</title><link>https://agonzalezro.github.io/posts/oct_2015_djugl/</link><pubDate>Fri, 09 Oct 2015 00:00:00 +0000</pubDate><guid>https://agonzalezro.github.io/posts/oct_2015_djugl/</guid><description>
&lt;p>Two days ago I gave a small talk in the &lt;a href="https://twitter.com/DJUGL">DJUGL (Django User Group London)&lt;/a> explaining how we could deploy a test application into Kubernetes. This post is going to explain something pretty similar, how to deploy a Flask app into Kubernetes and how to rolling update it.&lt;/p>
&lt;p>Before starting, you can find all the materials of this post in my &lt;a href="https://github.com/agonzalezro/k8s-py-example">k8s-py-example&lt;/a> repo.&lt;/p>
&lt;p>Download the app and build it twice, one for each of the version that you want to deploy. This versions will need to be tagged properly and sent to &lt;a href="https://hub.docker.com/">Docker Hub&lt;/a>. Basically the steps to follow are:&lt;/p>
&lt;pre>&lt;code>docker build -t agonzalezro/k8s-py-example .
docker tag agonzalezro/k8s-py-example:latest agonzalezro/k8s-py-example:0.1
# Change the code (src/app.py) a little bit to see the differences
docker build -t agonzalezro/k8s-py-example .
docker tag agonzalezro/k8s-py-example:latest agonzalezro/k8s/py-example:0.2
docker push agonzalezro/k8s-py-example
&lt;/code>&lt;/pre>
&lt;p>Now that all the work related with Docker is done, let&amp;rsquo;s take a look to the needed k8s files:&lt;/p>
&lt;p>&lt;strong>rc-0.1.yml&lt;/strong>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>&lt;strong>rc-0.2.yml&lt;/strong>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>&lt;strong>service.yml&lt;/strong>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>The &lt;code>rc&lt;/code> files are the definitions of your replication controllers, one of them using the version &lt;code>0.1&lt;/code> and the other the image &lt;code>0.2&lt;/code>. The service file is share since the application is going to be the same.&lt;/p>
&lt;p>Let&amp;rsquo;s run the first version of the app:&lt;/p>
&lt;pre>&lt;code>kubectl -f rc-0.1.yml -f service.yml --validate=false
# The validate tag is just needed because of a bug in current k8s
&lt;/code>&lt;/pre>
&lt;p>Now, if you do &lt;code>kubectl get services&lt;/code> you will see the external IP of your service. You can use it to check that it&amp;rsquo;s running and showing the code of the version &lt;code>0.1&lt;/code>.&lt;/p>
&lt;p>Cool! You have deployed your first k8s application, now, let&amp;rsquo;s update it:&lt;/p>
&lt;pre>&lt;code>kubectl rolling-update flaskapp-rc -f rc-0.2.yml
&lt;/code>&lt;/pre>
&lt;p>If you wait a little bit you will see in the logs what&amp;rsquo;s happening there. Let the command finish and you will have your &lt;code>0.2&lt;/code> version deployed having causing 0 downtime!&lt;/p>
&lt;p>As always, feel free to contact me here or use twitter: &lt;a href="https://twitter.com/agonzalezro">@agonzalezro&lt;/a>&lt;/p></description></item><item><title>Log your Docker containers from a container with packetbeat</title><link>https://agonzalezro.github.io/posts/packetbeat-docker/</link><pubDate>Mon, 17 Aug 2015 00:00:00 +0000</pubDate><guid>https://agonzalezro.github.io/posts/packetbeat-docker/</guid><description>
&lt;p>&lt;a href="https://github.com/elastic/packetbeat">packetbeat&lt;/a> is one of the best
application performance management tools in the opensource community. It&amp;rsquo;s now
part of the &lt;a href="https://www.elastic.co/products/beats">beats&lt;/a> that Elastic provide
us to monitor our applications. What it does is analyze our data packets to
send some useful information to ElasticSearch.&lt;/p>
&lt;p>After the introduction you probably realize that we will need: ElasticSearch
installed and if you want to see something useful you will need Kibana as well.
There is a &lt;a href="https://www.elastic.co/guide/en/beats/packetbeat/current/packetbeat-getting-started.html">guide for getting
started&lt;/a>
that explains the process pretty clearly. The &amp;ldquo;problem&amp;rdquo; with that guide is that
you need to install everything in your machine, this blog post is a 101 to have
it quickly running into containers.&lt;/p>
&lt;p>As mentioned, we will need ES and Kibana:&lt;/p>
&lt;pre>&lt;code>docker run -d -p 9200:9200 -p 9300:9300 --name elasticsearch-pb elasticsearch
docker run -d -p 5601:5601 --name kibana-pb --link elasticsearch-pb:elasticsearch \
-e ELASTICSEARCH_URL=http://elasticsearch:9200 kibana
&lt;/code>&lt;/pre>
&lt;p>Now we have all the required things to run our packetbeat. There are few points
that I want to raise before doing so:&lt;/p>
&lt;ol>
&lt;li>packetbeat will be monitoring our network traffic, this means that our
container running packetbeat needs to have access to the host network.&lt;/li>
&lt;li>the last &lt;code>Dockerfile&lt;/code> I found regarding this was:
&lt;a href="https://github.com/packetbeat/packetbeat-docker">https://github.com/packetbeat/packetbeat-docker&lt;/a> by
&lt;a href="https://twitter.com/tudor_g">Tudor&lt;/a> (one of the original developers) but
it is a little bit old. So I made my own based on that (should PR but I
wonder why the previous was not updated yet, and it would be nice to run
something more actual than 0.5 but there are no binaries):&lt;/li>
&lt;/ol>
&lt;!-- raw HTML omitted -->
&lt;p>The previous docker image will require a file &lt;code>packetbeat.yml&lt;/code> to work after.
As a quick start you can use this one:
&lt;a href="https://github.com/elastic/packetbeat/blob/master/packetbeat.dev.yml">https://github.com/elastic/packetbeat/blob/master/packetbeat.dev.yml&lt;/a> but
probably you would like to change your device from &lt;code>en0&lt;/code> to &lt;code>docker0&lt;/code>.&lt;/p>
&lt;pre>&lt;code>docker build -t agonzalezro/packetbeat .
docker run --net=host agonzalezro/packetbeat
&lt;/code>&lt;/pre>
&lt;p>Cool, now you are ready to go! Everything that you do into your containers will
be show on Kibana, to test it go to you docker host port &lt;code>5601&lt;/code>, it will ask
for an index pattern, change the default &lt;code>logstash-*&lt;/code> to &lt;code>packetbeat-*&lt;/code> and
enjoy it!&lt;/p>
&lt;p>&lt;a href="https://agonzalezro.github.io/packetbeat/kibana.png">&lt;img src="https://agonzalezro.github.io/packetbeat/kibana-thumb.png" alt="kibana-screenshot">&lt;/a>&lt;/p>
&lt;p>If you have any comment, let me know here or in
&lt;a href="http://twitter.com/agonzalezro">twitter&lt;/a>. Also, if you are interested in
monitoring with packetbeat you should definitely take a look to &lt;a href="http://acalustra.com/how-can-i-monitor-my-voip-application.html">&amp;ldquo;Kamailio
monitoring with statsd, SIPCapture or
Packetbeat&amp;rdquo;&lt;/a>
by my friend &lt;a href="http://twitter.com/eloycoto">eloycoto&lt;/a> who introduced me to
packetbeat :a)&lt;/p></description></item><item><title>Go introduction at Shopa</title><link>https://agonzalezro.github.io/posts/go101/</link><pubDate>Wed, 05 Aug 2015 00:00:00 +0000</pubDate><guid>https://agonzalezro.github.io/posts/go101/</guid><description>
&lt;p>Here at &lt;a href="http://shopa.com">Shopa&lt;/a> we use Go for some services but we use a lot
of Rails as well so not everybody needs to know Go. This is why I&amp;rsquo;ve decided to
do a small introduction to it in one of our workshops.&lt;/p>
&lt;p>The slides are mainly examples with a little bit of history around the Go
world. If you find them useful, feel free to grab them here:
&lt;a href="https://github.com/agonzalezro/slides/tree/master/go">https://github.com/agonzalezro/slides/tree/master/go&lt;/a>&lt;/p>
&lt;p>Probably I&amp;rsquo;ve forgotten about something but it was just a 1 hour and a half presentation.&lt;/p>
&lt;p>&lt;a href="http://go-talks.appspot.com/github.com/agonzalezro/slides/go/101.slide">Here you can see them in
action&lt;/a>.
I didn&amp;rsquo;t iframed them here because the layout was ugly and the sliding between
slides kinda poor.&lt;/p>
&lt;p>&lt;a href="http://twitter.com/agonzalezro">Tweet me&lt;/a> if you have more comments!&lt;/p></description></item><item><title>Docker workshop at Shopa</title><link>https://agonzalezro.github.io/posts/docker_shopa/</link><pubDate>Wed, 24 Jun 2015 00:00:00 +0000</pubDate><guid>https://agonzalezro.github.io/posts/docker_shopa/</guid><description>
&lt;p>Today I gave a workshop at Shopa about Docker: what is it, why it&amp;rsquo;s useful for
us and why it can even be more useful.&lt;/p>
&lt;p>I understand that just the slides without any context can be a little bit
misleading, but in case that it helps somebody I will share them here:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>The design of the PDF looks uglier than it really is, so if you want the html
slides you can always use the &lt;a href="https://github.com/agonzalezro/slides/blob/master/docker/Dockerfile">&lt;code>Dockerfile&lt;/code> provided with the source of the
slides&lt;/a> :)&lt;/p></description></item><item><title>IoT hackathon with Intel Edison and Go</title><link>https://agonzalezro.github.io/posts/edison_hackathon/</link><pubDate>Thu, 18 Jun 2015 00:00:00 +0000</pubDate><guid>https://agonzalezro.github.io/posts/edison_hackathon/</guid><description>
&lt;p>I spent last weekend in a hackathon organised by Intel to show their Intel
Edison platform. I can just say that it was awesome, the quality of the
projects, the prizes, the food, the freebies (yes, they gave us an Intel
Edison)&amp;hellip;&lt;/p>
&lt;p>But this post is not about that, I want to explain my project and how I made
Golang work in an Intel Edison thanks to &lt;a href="http://gobot.io/">gobot&lt;/a>.&lt;/p>
&lt;p>As you are already aware, Go easily supports cross compiling creating a binary
that you can use in your other devices. In this case, the Intel Edison is (by
default) a Linux distribution with i386 architecture.&lt;/p>
&lt;h2 id="what-did-i-do">What did I do?&lt;/h2>
&lt;p>I did a simple project to track the happiness of the assistant to a conference:
they can vote if it was a good one ro not &amp;amp; the Edison is also tracking the
clapping. All this information is stored into a
&lt;a href="https://influxdb.com/">InfluxDB&lt;/a> and I was using
&lt;a href="http://grafana.org/">Grafana&lt;/a> to demo it:&lt;/p>
&lt;p>&lt;img src="https://agonzalezro.github.io/iot_grafana.png" alt="image">&lt;/p>
&lt;p>Ok, let&amp;rsquo;s start!&lt;/p>
&lt;h2 id="first-step-setup-the-wifi">First step: setup the wifi&lt;/h2>
&lt;p>After you connect the Edison you will have a new decive in &lt;code>/dev/&lt;/code> with the
form: &lt;code>/dev/tty.usbserial-...&lt;/code>. You can just use screen to connect to it, in my
case:&lt;/p>
&lt;pre>&lt;code>screen /dev/tty.usbserial-A903BU3J 115200 -L
&lt;/code>&lt;/pre>
&lt;p>Inside the machine:&lt;/p>
&lt;pre>&lt;code>configure_edison --wifi
&lt;/code>&lt;/pre>
&lt;p>You could as well use &lt;code>--setup&lt;/code> if you want to change the name, password, etc&amp;hellip;&lt;/p>
&lt;p>Cool! Now we have the device in out network, let&amp;rsquo;s see the IP with &lt;code>ifconfig&lt;/code>
and copy/paste it somewhere.&lt;/p>
&lt;h2 id="second-step-code">Second step: Code!&lt;/h2>
&lt;p>As I said before I was using the gobot framework. This framework easily allows
you to access to the GPIO that I&amp;rsquo;ve been using in the Edison (buttons, lights &amp;amp;
sound sensor).&lt;/p>
&lt;p>Here is a snippet:&lt;/p>
&lt;pre>&lt;code>gbot := gobot.NewGobot()
edisonAdaptor := edison.NewEdisonAdaptor(&amp;quot;edison&amp;quot;)
buttonPositive := gpio.NewButtonDriver(edisonAdaptor, &amp;quot;button_positive&amp;quot;, &amp;quot;4&amp;quot;)
...
robot := gobot.NewRobot(
&amp;quot;buttonBot&amp;quot;,
[]gobot.Connection{edisonAdaptor},
[]gobot.Device{buttonPositive, buttonNegative, redLed, greenLed, blueLed, soundSensor},
work,
)
&lt;/code>&lt;/pre>
&lt;p>&lt;code>work&lt;/code> is a loop where you can heard for the events created by the devices.&lt;/p>
&lt;p>If you want to see the full code: &lt;a href="https://github.com/agonzalezro/iotroadshow_june_2015/blob/master/main.go">https://github.com/agonzalezro/iotroadshow_june_2015/blob/master/main.go&lt;/a>&lt;/p>
&lt;h2 id="third-step-compile-deploy--run">Third step: compile, deploy &amp;amp; run&lt;/h2>
&lt;p>Crosscompile it. I was using &lt;a href="https://github.com/mitchellh/gox">gox&lt;/a> but you
can use the default tools for that as well. In my case:&lt;/p>
&lt;pre>&lt;code>gox -arch=&amp;quot;386&amp;quot; -os=&amp;quot;linux&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>This will generate a file called &lt;code>project_linux_386&lt;/code> that is what you will need
to copy to the Edison.&lt;/p>
&lt;p>To copy it you just need a simple scp:&lt;/p>
&lt;pre>&lt;code>scp project_linux_i386 root@[the_edison_ip]:/home/root/my_program
&lt;/code>&lt;/pre>
&lt;p>And to run it you can ssh and manually run it or as I was doing:&lt;/p>
&lt;pre>&lt;code>ssh root@[the_edison_ip] /home/root/my_program
&lt;/code>&lt;/pre>
&lt;p>I&amp;rsquo;ve automated this process in a
&lt;a href="https://github.com/agonzalezro/iotroadshow_june_2015/blob/master/Makefile">Makefile&lt;/a>.&lt;/p>
&lt;p>Also, feel free to check the
&lt;a href="https://github.com/agonzalezro/iotroadshow_june_2015/blob/master/README.md">README.md&lt;/a>
with a better explanation about what my project was.&lt;/p>
&lt;p>Any question? Reach me on twitter as
&lt;a href="http://twitter.com/agonzalezro">@agonzalezro&lt;/a> or just post a comment here.&lt;/p></description></item><item><title>The well deserved Golang UK conference is here</title><link>https://agonzalezro.github.io/posts/golanguk2015/</link><pubDate>Sun, 29 Mar 2015 00:00:00 +0000</pubDate><guid>https://agonzalezro.github.io/posts/golanguk2015/</guid><description>
&lt;p>Hi mum &amp;amp; dad (my 2 followers on the blog?) some friends,
(&lt;a href="https://twitter.com/johannacherry">Johanna&lt;/a>,
&lt;a href="https://twitter.com/_samdb">Sam&lt;/a> &amp;amp; &lt;a href="https://twitter.com/_samdb">David&lt;/a>) and
myself have decided to organize a Go conference in the UK the next August 21.&lt;/p>
&lt;p>He had opened the blind bird at the beginning of the week and we are already
close to finish those cheap tickets, so hurry up and &lt;a href="http://www.eventbrite.co.uk/e/golang-uk-conference-2015-tickets-16233380478">buy a
ticket&lt;/a>.
We can see for the call for papers already received that the quality of the
talks is going to be awesome, but don&amp;rsquo;t miss your opportunity as &lt;a href="http://www.golanguk.com/speakers/">send us a
paper&lt;/a> before May 31st.&lt;/p>
&lt;p>As a final note I want to and that if you want to sponsor the event or you have
any further question, feel free to presonally &lt;a href="https://twitter.com/agonzalezro">contact
me&lt;/a> or do it through the conference email:
&lt;a href="http://info@golanguk.com">info@golanguk.com&lt;/a>.&lt;/p>
&lt;p>I know that a bunch of assiduous people to the meetups is going already, so
hope to see you there as well!&lt;/p></description></item><item><title>Graph your meetup.com group with Neo4J and some Go</title><link>https://agonzalezro.github.io/posts/gotagmee/</link><pubDate>Wed, 25 Feb 2015 00:00:00 +0000</pubDate><guid>https://agonzalezro.github.io/posts/gotagmee/</guid><description>
&lt;p>Last days I&amp;rsquo;ve been spending sometime in a small project for fun. Sadly I
couldn&amp;rsquo;t do &lt;a href="https://twitter.com/agonzalezro/status/567823851791589376">anything for
production&lt;/a> so I
hacked &lt;a href="https://github.com/agonzalezro/gotagmee">gotagmee&lt;/a> which is a tiny
thingy that will created some goroutines to get all the members in a
&lt;a href="http://meetup.com">meetup.com&lt;/a> group with their interests and store them in a
Neo4J DB as &lt;code>Member&lt;/code> or &lt;code>Topic&lt;/code> entities with their respective relations.&lt;/p>
&lt;p>I wrote this because I wanted to get the data, but then I realised that this
piece of code is pretty neat (check the github repo for the original):&lt;/p>
&lt;pre>&lt;code>membersChan := make(chan db.Member, 1)
go api.Members(membersChan)
db, _ := db.NewDB(*neo4jDB)
for m := range membersChan {
db.Store(m)
}
&lt;/code>&lt;/pre>&lt;p>Basically I am creating a channel that is going to be used to receive the
members (1 by 1) whenever one of the subroutines scraping the API have one
ready. Perhaps there are better ways to do it, but I really like it :)&lt;/p>
&lt;p>Let&amp;rsquo;s go to the important part: &lt;strong>the data&lt;/strong>. I&amp;rsquo;ve used the code to extract
the data of the meetup that I co-organize here at London, the &lt;a href="http://www.meetup.com/Go-London-User-Group">Go London User
Group&lt;/a> if you are interested, I
could share with you a dump. For this example I was just interested in the
users and topics, but if you want, change it to get more data:
&lt;a href="http://www.meetup.com/meetup_api/docs/2/members/">http://www.meetup.com/meetup_api/docs/2/members/&lt;/a>&lt;/p>
&lt;p>We knew this already, but how many users do we have, easy peasy:&lt;/p>
&lt;pre>&lt;code>neo4j-sh (?)$ match (n:Member) return count(n);
+----------+
| count(n) |
+----------+
| 671 |
+----------+
1 row
27 ms
&lt;/code>&lt;/pre>&lt;p>But perhaps the number of topic that our users follow is not (was not) as easy
to know:&lt;/p>
&lt;pre>&lt;code>neo4j-sh (?)$ match (n:Topic) return count(n);
+----------+
| count(n) |
+----------+
| 1204 |
+----------+
1 row
30 ms
&lt;/code>&lt;/pre>&lt;p>I know that I am part of that meeting, what do I &amp;ldquo;like&amp;rdquo;:&lt;/p>
&lt;pre>&lt;code>neo4j-sh (?)$ match (n)-[]-(t) where n.name =~ &amp;quot;Alexandre.*&amp;quot; return count(t);
+----------+
| count(t) |
+----------+
| 17 |
+----------+
1 row
255 ms
&lt;/code>&lt;/pre>&lt;p>I think that I didn&amp;rsquo;t impress anybody until here, but one of the ideas behind
graph DBs is easily find connections between entities, for example what do I
have in common with my friend &lt;a href="http://twitter.com/ipedrazas">@ipedrazas&lt;/a>? I
know that he likes beers as me, but I am talking about meetup.com relations,
let&amp;rsquo;s see!&lt;/p>
&lt;pre>&lt;code>neo4j-sh (?)$ match (n)-[]-(t:Topic)-[]-(m) where n.name =~ &amp;quot;Alexandre.*&amp;quot; and m.name =~ &amp;quot;Ivan Pedrazas&amp;quot; return t.name;
+----------------------+
| t.name |
+----------------------+
| &amp;quot;Open Source&amp;quot; |
| &amp;quot;Programming&amp;quot; |
| &amp;quot;Mobile Development&amp;quot; |
| &amp;quot;golang&amp;quot; |
+----------------------+
4 rows
91 ms
&lt;/code>&lt;/pre>&lt;p>Nice! But if you want to do it beautiful for your boss, you could as well use Cypher:&lt;/p>
&lt;p>&lt;img src="https://agonzalezro.github.io/dev/meetup_neo4j_example.png" alt="meetup_neo4j_example">&lt;/p>
&lt;p>Now imagine that I want to target the interest of my group by the things that
they like more, which ones are those?&lt;/p>
&lt;pre>&lt;code>neo4j-sh (?)$ match ()-[r]-&amp;gt;(t:Topic) with t, count(r) as rel return t.name order by rel desc limit 10;
+------------------------+
| t.name |
+------------------------+
| &amp;quot;Programming&amp;quot; |
| &amp;quot;Software Development&amp;quot; |
| &amp;quot;Open Source&amp;quot; |
| &amp;quot;New Technology&amp;quot; |
| &amp;quot;Technology&amp;quot; |
| &amp;quot;Web Development&amp;quot; |
| &amp;quot;Startup Businesses&amp;quot; |
| &amp;quot;Big Data&amp;quot; |
| &amp;quot;Cloud Computing&amp;quot; |
| &amp;quot;Internet Startups&amp;quot; |
+------------------------+
10 rows
99 ms
&lt;/code>&lt;/pre>&lt;p>They were kinda clear for this kind of geeky meetup :)&lt;/p>
&lt;p>Hope that you enjoyed, and if you have any more question or queries for the data,
ping me here or at &lt;a href="http://twitter.com/agonzalezro">@agonzalezro&lt;/a>.&lt;/p></description></item><item><title>How I prepared my Mac to make some Docker development</title><link>https://agonzalezro.github.io/posts/docker-env/</link><pubDate>Mon, 01 Dec 2014 00:00:00 +0000</pubDate><guid>https://agonzalezro.github.io/posts/docker-env/</guid><description>
&lt;p>This post is about &lt;strong>how I did it!&lt;/strong> not about a standard way or something like
that, if you use any other way I would be happy to hear it on the comments.&lt;/p>
&lt;p>I usually use &lt;code>boot2docker&lt;/code> on my machine to run container, but it looks like
it was misbehaving a little bit when I was trying to create the binary of my
dev branch with:&lt;/p>
&lt;pre>&lt;code>$ make binary
&lt;/code>&lt;/pre>
&lt;p>Actually, it was just not creating it.&lt;/p>
&lt;p>I could also create some cross-compiled binaries but that didn&amp;rsquo;t work either.
It was a really weird situation because I couldn&amp;rsquo;t find the path that it was
saying that it was creating. Not in my machine, not in my boot2docker VM
either. So, after some frustrating time I decided to go with vagrant.&lt;/p>
&lt;h2 id="what-i-wanted">What I wanted?&lt;/h2>
&lt;ul>
&lt;li>My vim! I couldn&amp;rsquo;t live without that.&lt;/li>
&lt;li>My ssh keys for github and similar without copying them to the vagrant box.&lt;/li>
&lt;/ul>
&lt;h2 id="how-i-did-it">How I did it?&lt;/h2>
&lt;h3 id="vagrant">vagrant&lt;/h3>
&lt;p>It was a simple process after you have clear what you really want to do:&lt;/p>
&lt;pre>&lt;code>$ cd myawesomebox
$ vagrant init # Edit the file if you want more memory or similar
$ git clone git@github.com:YOUR_USERNAME/docker
$ vagrant ssh
$ sudo su -
&lt;/code>&lt;/pre>
&lt;p>What we did there? We have created a &lt;code>Vagrantfile&lt;/code> and we clone the repo in the
same folder. Thanks to that when we are inside the vagrant box (with &lt;code>vagrant ssh&lt;/code>) we will be able to access to it on the path &lt;code>/vagrant&lt;/code> of your box.&lt;/p>
&lt;p>The advantage of this approach is that you can access to all the docker code
from your host machine in the path &lt;code>myawesomebox&lt;/code> so you will not need to copy
any key, any conf or anything like that.&lt;/p>
&lt;h3 id="docker">docker&lt;/h3>
&lt;p>Now it&amp;rsquo;s time to update your docker server and create your on docker client
(remember that we are logged in as root on that box):&lt;/p>
&lt;pre>&lt;code># cd /vagrant/docker
# make build&amp;amp;&amp;amp;make binary
# service docker stop
# cp bundles/1.3.2-dev/binary/docker-1.3.2-dev /usr/bin/docker
# service docker start
&lt;/code>&lt;/pre>
&lt;p>Where &lt;code>1.3.2&lt;/code> is the current version at the time of writing &amp;amp;
&lt;code>/usr/bin/docker&lt;/code> is your old docker server binary.&lt;/p>
&lt;p>Now you are running a new server, but where is the client?! Easy peasy, on the
same place that the server was originally:&lt;/p>
&lt;pre>&lt;code># bundles/1.3.2-dev/binary/docker
...
&lt;/code>&lt;/pre>
&lt;p>I usually alias it to the letter &lt;code>d&lt;/code> to access to it quicker without moving
stuff around:&lt;/p>
&lt;pre>&lt;code># alias d=&amp;quot;`pwd`/bundles/1.3.2-dev/binary/docker&amp;quot;
&lt;/code>&lt;/pre>
&lt;h2 id="whats-next">What&amp;rsquo;s next?&lt;/h2>
&lt;p>I would say that develop some nice pull request? Or at least try! It&amp;rsquo;s fun
anyway :)&lt;/p>
&lt;p>I went through all this pain while &lt;a href="http://twitter.com/eloycoto">@eloycoto&lt;/a> &amp;amp;
me were developing a &lt;a href="https://github.com/docker/docker/pull/9415">small PR to show vertical &lt;code>ps&lt;/code>
outputs&lt;/a>, so, thanks mate!&lt;/p>
&lt;p>If you have any question or you think that my way of doing this stinks, please,
let me know! I would really, really appreciate it.&lt;/p></description></item><item><title>Dockerizing Pligg with Fig</title><link>https://agonzalezro.github.io/posts/pligg-docker/</link><pubDate>Mon, 24 Nov 2014 00:00:00 +0000</pubDate><guid>https://agonzalezro.github.io/posts/pligg-docker/</guid><description>
&lt;p>For a pet project I needed &lt;a href="http://pligg.com/">Pligg&lt;/a> which is kinda a social
network site in the style of the old-digg (with karma and this kind of things).&lt;/p>
&lt;p>Installing a LAMP system is kinda boring stuff, so, for that and for the sake
of learning I decided to go with &lt;a href="https://www.docker.com/">Docker&lt;/a> &amp;amp;
&lt;a href="http://www.fig.sh/">Fig&lt;/a>. Sadly or luckily, every time that I dockerize
something I find a lot of unexpected problems that slow me down, but&amp;hellip; you
always learn something!&lt;/p>
&lt;p>This post is to explain a little bit the process and the problems that I found
and how I solved them. It&amp;rsquo;s not a how to, it&amp;rsquo;s more a explanation of what I did
and perhaps you can provide a better solution on the comments.&lt;/p>
&lt;h2 id="what-do-i-need">What do I need?&lt;/h2>
&lt;p>The site is &amp;ldquo;simple&amp;rdquo; so the only required stuff will be a MySQL server and an
Apache2 server. You could run 2 Docker instances manually, or&amp;hellip; use the magic
provided by Fig. This is the &lt;code>fig.yml&lt;/code> file that explains my service:&lt;/p>
&lt;pre>&lt;code>web:
build: .
links:
- db
volumes:
- /var/log:/var/www/logs
ports:
- &amp;quot;80:80&amp;quot;
environment:
- MYSQL_PASSWORD
- MY_BASE_URL
db:
image: mysql
volumes:
- /var/lib/mysql:/var/lib/mysql
environment:
- MYSQL_DATABASE=dbpligg
- MYSQL_USER=pligguser
- MYSQL_ROOT_PASSWORD
- MYSQL_PASSWORD
ports:
- &amp;quot;3306:3306&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>Basically I am saying that I will have 2 servers: &amp;ldquo;web&amp;rdquo; &amp;amp; &amp;ldquo;db&amp;rdquo; and specifying
their volumes, environment variables and exported ports.&lt;/p>
&lt;h3 id="problem">Problem?&lt;/h3>
&lt;p>First thing that we see here: &lt;code>MY_BASE_URL&lt;/code> &amp;amp; &lt;code>MYSQL_{,ROOT_}PASSWORD&lt;/code> don&amp;rsquo;t
have any value, this is because Fig is going to got those values from the
current Docker host. I need them for specified some settings file that
originally were written in a normal file (difficult to change while deploying).&lt;/p>
&lt;p>Also, &lt;code>MY_BASE_URL&lt;/code> is a small/ugly trick. It seems that Pligg requires to know
the host were it&amp;rsquo;s running to serve static assets as CSS or JS.&lt;/p>
&lt;p>If you take a look to &lt;a href="https://github.com/agonzalezro/docker-pligg/tree/master/config">my repo &lt;code>config&lt;/code>
folder&lt;/a> you
will see the slightly modified versions of two configuration files for Pligg
that are making use of this environment variables.&lt;/p>
&lt;h3 id="more-problems">More problems?&lt;/h3>
&lt;p>For running Pligg we need a minimal DB structure I&amp;rsquo;ve found 2 different ways of
creating this data in my data container, but none of them are optimal for me,
mainly because they require an extra step:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>I&amp;rsquo;ve created minimal SQL dump with some default values and on the &lt;code>README.md&lt;/code>
provide a quick way of ingest this data using the same container:&lt;/p>
&lt;pre>&lt;code> $ docker exec dockerpligg_db_1 \
mysql -u pligguser -p$MYSQL_PASSWORD dbpligg &amp;lt; &amp;quot;`cat pligg.sql`&amp;quot;
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>Another way is going through all the installation process accessing to
&lt;a href="http://example.com/install">http://example.com/install&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>I think that perhaps creating a script that checks is the DB if empty and if it
is it uses the SQL to dump the DB back would be an option, but seems kinda
dangerous to automate that process in a live environment (anybody said delete
data by a mistaken dump?).&lt;/p>
&lt;p>&lt;a href="http://acalustra.com/">@eloycoto&lt;/a> has recommended me to use inheritance of
containers. But I am not happy with that solution either: I would need two
&lt;code>Dockerfile&lt;/code>s and possibly two &lt;code>fig.yml&lt;/code> files as well or add some weird magic
to replace one container with the other after the installation.&lt;/p>
&lt;h3 id="third-thing-that-i-dont-really-like">Third thing that I don&amp;rsquo;t really like&lt;/h3>
&lt;p>After the first time that you run the installation you need to manually remove
the install path (this seems quite common in PHP apps?). I am doing that
running a &lt;code>docker exec&lt;/code> to that container, but I would prefer to manually
remove it with the &lt;code>Dockerfile&lt;/code>. Why I don&amp;rsquo;t do so? Because if I remove that
folder I am forcing all the users of my configuration to use the dump SQL
method explained above and I don&amp;rsquo;t give them any change.&lt;/p>
&lt;h2 id="so">So&amp;hellip;&lt;/h2>
&lt;p>I suspect that it&amp;rsquo;s normal to have that kind of problems trying to &amp;ldquo;migrate&amp;rdquo; an
application that was never used before in a Docker container.&lt;/p>
&lt;p>To be honest with Pligg, the only changes that I required were minimal, but I
don&amp;rsquo;t know if that &amp;ldquo;install&amp;rdquo; part could be just removed with my own settings
file, I tried that and it was asking me to repeat values that were already set
in the &lt;code>settings.php&lt;/code>.&lt;/p>
&lt;p>I am not happy with the dump/install solution that I&amp;rsquo;ve found, but it works‚Ñ¢!&lt;/p>
&lt;p>I am sure that if you were using Docker or Fig before you will have plenty of
complaints about my article, let me know leaving a comment or just &lt;a href="http://twitter.com/agonzalezro">tweet me
something&lt;/a>.&lt;/p></description></item><item><title>How to manage multiple errors in Go</title><link>https://agonzalezro.github.io/posts/errors/</link><pubDate>Fri, 17 Oct 2014 00:00:00 +0000</pubDate><guid>https://agonzalezro.github.io/posts/errors/</guid><description>
&lt;p>Let me start with a disclaimer, I don&amp;rsquo;t really know if this is a pattern that
must be followed or it&amp;rsquo;s just a weird idea coming out of my head.&lt;/p>
&lt;p>The second disclaimer is that I am pretty sure that I am not the only mind that
thought about this, but I didn&amp;rsquo;t see it in use in any place. Why?&lt;/p>
&lt;p>Error handling in Go has his advantages and disadvantages, for me, the most
important disadvantage is the &amp;ldquo;weird&amp;rdquo; way of checking the error just after the
line that can raise it.&lt;/p>
&lt;p>I&amp;rsquo;ve experimenting a little bit with it and I found this solution:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>Basically, with the default approach you would need 2 new lines as follows:&lt;/p>
&lt;pre>&lt;code>if err != nil {
...
}
&lt;/code>&lt;/pre>&lt;p>I find this pattern pretty useful for things like http handlers or so.&lt;/p>
&lt;p>Also, you are able to add a &lt;code>switch&lt;/code> at the end to check the kind of error and
keep your code more &amp;ldquo;organized&amp;rdquo;.&lt;/p>
&lt;p>What do you think? Should I use it in every place I can? Do you do it in a
better way?&lt;/p></description></item><item><title>Draw (and more) your architecture with Neo4J</title><link>https://agonzalezro.github.io/posts/neo4j_architecture/</link><pubDate>Tue, 26 Aug 2014 00:00:00 +0000</pubDate><guid>https://agonzalezro.github.io/posts/neo4j_architecture/</guid><description>
&lt;p>As some of you already know I work at &lt;a href="http://greenmangaming.com">Green Man
Gaming&lt;/a> (mainly at the
&lt;a href="http://playfire.com">playfire&lt;/a> project). We were planning to do some changes
in our architecture but it&amp;rsquo;s extremely hard to have an idea of all our services
and DBs in just a piece of A4 paper. I was trying, trust me, but it was
impossible.&lt;/p>
&lt;p>When I started with this task I did it with
&lt;a href="https://www.lucidchart.com">lucidchart&lt;/a>, after it got so messy I moved to
&lt;a href="http://www.graphviz.org/">graphviz&lt;/a>, but even with the usual good graphs that
I get from graphviz it was impossible to get something readable this time.&lt;/p>
&lt;p>So, it happened! I remembered &lt;a href="http://ivan.pedrazas.me/?p=280">this post&lt;/a> made
by my friend Iv√°n and I thought, why not?&lt;/p>
&lt;p>Sadly, this post is not going to show any real data from GMG, but if you are
interested it&amp;rsquo;s the moment to apply because we are hiring &amp;amp; we have the graphs
around all the whiteboard in the office! Just grab me an email.&lt;/p>
&lt;h2 id="what-do-i-need">What do I need?&lt;/h2>
&lt;p>Basically, you just need Neo4J. You can install it however you want, I&amp;rsquo;ve just
run a Docker container with it:&lt;/p>
&lt;pre>&lt;code>docker run -d -p 7474:7474 tpires/neo4j
&lt;/code>&lt;/pre>
&lt;p>Now, if you access to your docker container at http://localhost:7474 (or using
the host from &lt;code>boot2docker ip&lt;/code> if you run docker with boot2docker) you will see
the cypher shell which is one of the ways that you can use to interact with
your DB.&lt;/p>
&lt;h2 id="what-i-am-going-to-draw">What I am going to draw?&lt;/h2>
&lt;p>In my case, and for a POC, I&amp;rsquo;ve written the following entities:&lt;/p>
&lt;ul>
&lt;li>Person&lt;/li>
&lt;li>Technology&lt;/li>
&lt;li>Service&lt;/li>
&lt;/ul>
&lt;p>You could write some other entities as for example DBs.&lt;/p>
&lt;p>The connections here are kinda clear: a person knows a technology which is
used to write a service that use a DB as backend, so, let&amp;rsquo;s write it!&lt;/p>
&lt;p>To create entities the syntax is as follow:&lt;/p>
&lt;pre>&lt;code>CREATE (variable:Type{attributes})
&lt;/code>&lt;/pre>
&lt;p>And to create Relations (one of the ways):&lt;/p>
&lt;pre>&lt;code>CREATE (variable1)-[:RELATION_NAME]-&amp;gt;(variable2)
&lt;/code>&lt;/pre>
&lt;p>You will understand this better after we start creating our entities.&lt;/p>
&lt;p>Create your engineers:&lt;/p>
&lt;pre>&lt;code>CREATE
(dev1:Person{name:&amp;quot;Alex&amp;quot;}),
(dev2:Person{name:&amp;quot;Maria&amp;quot;}),
(dev3:Person{name:&amp;quot;Pepe&amp;quot;}),
&lt;/code>&lt;/pre>
&lt;p>Before the : you can see that we have defined a variable to refer to this
just-created entities. All the nodes that we are creating here are of type
Person and each of them have a different name.&lt;/p>
&lt;p>To create the relationships between Technology and Person, we define the
technology using the same method that we used to create the Person, but we add
the relationships:&lt;/p>
&lt;pre>&lt;code>...
(python:Technology{name:&amp;quot;Python&amp;quot;}),
(go:Technology{name:&amp;quot;Go&amp;quot;}),
(dev1)-[:KNOWS]-&amp;gt;(python),
(dev1)-[:KNOWS]-&amp;gt;(go),
(dev2)-[:KNOWS]-&amp;gt;(python),
(dev3)-[:KNOWS]-&amp;gt;(go),
&lt;/code>&lt;/pre>
&lt;p>And finally, we add our services:&lt;/p>
&lt;pre>&lt;code>...
(service1:Service{name:&amp;quot;Service #1&amp;quot;}),
(service2:Service{name:&amp;quot;Service #2&amp;quot;}),
(service1)-[:CONNECTS]-&amp;gt;(service2),
(service1)-[:WRITTEN_WITH]-&amp;gt;(go),
(service2)-[:WRITTEN_WITH]-&amp;gt;(python)
&lt;/code>&lt;/pre>
&lt;h2 id="querying-for-drawing">Querying for drawing&lt;/h2>
&lt;p>Now, you can run all the script and we can see the result. For the first output
we are going just to show everything:&lt;/p>
&lt;pre>&lt;code>MATCH (n)-[r]-() RETURN n, r
&lt;/code>&lt;/pre>
&lt;p>And you will get this!&lt;/p>
&lt;p>&lt;img src="https://agonzalezro.github.io/biz/neo4j_architecture/1.png" alt="Cypher MATCH #1">&lt;/p>
&lt;p>So, what&amp;rsquo;s the point of all this? Basically, that you can do queries that will
make the graph smaller for your needs. This example data that we have added is
quite small (just few nodes), in the real graph that I am working on we have
already few dozens. For example, imagine that you just want to see python
related information:&lt;/p>
&lt;pre>&lt;code>MATCH (a)-[r]-() WHERE a.name=&amp;quot;Python&amp;quot; RETURN a, r
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://agonzalezro.github.io/biz/neo4j_architecture/2.png" alt="Cypher MATCH #2">&lt;/p>
&lt;p>Or you just want to see the people that can work with the Server #1&lt;/p>
&lt;pre>&lt;code>MATCH (s:Service)-[r]-()-[r2:KNOWS]-(p:Person)
WHERE s.name=&amp;quot;Service #1&amp;quot; RETURN s, p
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://agonzalezro.github.io/biz/neo4j_architecture/3.png" alt="Cypher MATCH #2">&lt;/p>
&lt;h2 id="one-more-thing">One more thing&lt;/h2>
&lt;p>For now, this project in my company is just a POC and I have not really clear
what attributes and entities I should draw to make this graph useful for the
present and for the future. If you have previous experiences or you want to
start a brainstorming, write on the comments or &lt;a href="http://twitter.com/agonzalezro">find me at
twitter&lt;/a>.&lt;/p>
&lt;p>Also, for now I am happy with just creating some screenshots from the data that
Cypher is showing to me, but it would be really nice to find a more
professional way of sharing this graphs. Cypher renders them with D3, so, I
don&amp;rsquo;t fully understand why it doesn&amp;rsquo;t support exporting them in a easy way.
Again, if you know something, just let me know.&lt;/p></description></item><item><title>How to find a flat in London with some help</title><link>https://agonzalezro.github.io/posts/flats/</link><pubDate>Sun, 03 Aug 2014 00:00:00 +0000</pubDate><guid>https://agonzalezro.github.io/posts/flats/</guid><description>
&lt;p>&lt;strong>EDIT:&lt;/strong> I&amp;rsquo;ve added a little bit more of code to the gist to get the latitude
and longitude of the flat. This way the process of plotting them is more
accurate and incredibly easy. Thanks again &lt;a href="http://cartodb.com">CartoDB&lt;/a>!&lt;/p>
&lt;p>At the end of this month I am going to move with a friend. This movement is
going to be something like the 7th one since I am living here (little bit less
than 2 years).&lt;/p>
&lt;p>We are a little bit struggling trying to find a place so I decided that we need
a little bit of help:&lt;/p>
&lt;p>Do you know &lt;a href="http://gumtree.com">gumtree.com&lt;/a>? That page is extremely good for
renting if you just take care of the content (aka adverts that users upload)
but it&amp;rsquo;s extremely bad at searching: I couldn&amp;rsquo;t filter to know when the flat would be available and I would be able to move in! Seriously?&lt;/p>
&lt;p>To fix this I made a small scraper that is going to gather data from few pages
of the search results already filtered by gumtree, check the &lt;code>QUERY_PARAMS&lt;/code> on
the &lt;a href="https://gist.github.com/agonzalezro/440e7bf41e77c284d735">following gist&lt;/a>:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>In the other hand, the location needs to be a place close to King&amp;rsquo;s Cross and
close to Mile End. Calculate commute times from one address to another one
doesn&amp;rsquo;t look straightforward and easy to do, so, the best solution (in relation
dev_time/benefit) was showing all those flats in a map, and I made it thanks to
the help of CartoDB. This piece of software is amazing, basically the process
was:&lt;/p>
&lt;ol>
&lt;li>drag&amp;amp;drop the CSV to your CartoDB account.&lt;/li>
&lt;li>&lt;del>click on the dropdown of the &amp;ldquo;location&amp;rdquo; row and then on &amp;ldquo;Georeference&amp;rdquo;.&lt;/del>&lt;/li>
&lt;li>&lt;del>in the popup that will be shown to you, you must select &amp;ldquo;&amp;ldquo;You have one or
more columns with the address&amp;rdquo;, and after that you will have a georeferenced
list of points. The only bad point with this solution is that every month
you just have 100 geoferential queries available for free :(&lt;/del>&lt;/li>
&lt;/ol>
&lt;p>With that data you can create your own visualisation as I made here:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>If you want to say something about this post or you want to offer me a nice
flat in London, feel free of use the comments or find me in twitter:
&lt;a href="http://twitter.com/agonzalezro">@agonzalezro&lt;/a>&lt;/p></description></item><item><title>12 Go Best Practices</title><link>https://agonzalezro.github.io/posts/go_meetup_mar_2014/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>https://agonzalezro.github.io/posts/go_meetup_mar_2014/</guid><description>
&lt;p>Last Monday I had the chance to see &lt;a href="https://twitter.com/francesc">@francesc&lt;/a>
talking on the &lt;a href="http://www.meetup.com/Go-London-User-Group">Go London User
Group&lt;/a>. His talk was about best
practices (and advices) when you are programming in Go.&lt;/p>
&lt;p>Summarising it a little bit, I would say that some of the cases explained there
are things that you are going to finish doing even without knowing that you are
doing &amp;ldquo;best practices&amp;rdquo;, but they are other examples that are incredible useful
and clever &amp;amp; I would love to assist to this conference few months ago.&lt;/p>
&lt;p>At the beginning of the slides you are going to see an step-by-step refactoring
which could (and should) be applied to any other language out there. You will
realise of the major improvement on the readability of that piece of code.
Francesc said that the refactored version could possibly be a little bit
slower, but you will have in your power a piece of maintainable code.&lt;/p>
&lt;p>If I need to choose one of the tricks showed, I would definitely go for the
type switch on the (&lt;a href="http://talks.golang.org/2013/bestpractices.slide#8">slide
#8&lt;/a>). Basically, you can
receive an interface as parameter and do a quick casting to whatever kind of
type that you want:&lt;/p>
&lt;pre>&lt;code>....
switch x := v.(type) { // where v is an interface{}
case string:
w.Write(int32(len(x)))
w.Write([]byte(x))
...
&lt;/code>&lt;/pre>
&lt;p>I would say too that coming from a language like Python, it&amp;rsquo;s really easy to be
temped to overuse that functionality :) What do you think?&lt;/p>
&lt;p>Finally, &lt;a href="http://talks.golang.org/2013/bestpractices.slide#1">here you have the
slides&lt;/a> enjoy them as I
did!&lt;/p></description></item><item><title>Tailing multiple logs with tmux</title><link>https://agonzalezro.github.io/posts/tailing-with-tmux/</link><pubDate>Sat, 15 Mar 2014 00:00:00 +0000</pubDate><guid>https://agonzalezro.github.io/posts/tailing-with-tmux/</guid><description>
&lt;p>I had a system that was creating a different log for each worker. Those logs
where in the form: &lt;code>/var/log/baselog&lt;/code>, &lt;code>/var/log/baselog.1&lt;/code>,
&lt;code>/var/log/baselog.2&lt;/code> and so on. I wanted to tail them but they were being
updated simultaneously so the output of the tail was being a mess.&lt;/p>
&lt;p>I am a &lt;a href="http://tmux.sourceforge.net/">tmux&lt;/a> user since few months ago (if you
aren&amp;rsquo;t, you should!) so I&amp;rsquo;ve decide to open all of them in different tmux
panes. Thanks to having a pane for every log what we will achieve is the
ability to scroll just one of them, maximize it in case that we need it, move
to a new window, save the buffer&amp;hellip;&lt;/p>
&lt;p>How can you achieve that? Quite simple, just download this script to some
place:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>Once you have saved it installed, run it with the base log file:&lt;/p>
&lt;pre>&lt;code>sh tail_several_logs.sh /var/log/baselog
&lt;/code>&lt;/pre>
&lt;p>The script have some limitations easily fixable:&lt;/p>
&lt;ul>
&lt;li>You should provide a fullpath.&lt;/li>
&lt;li>The logs should be in the form of baselog.N where N is a number.&lt;/li>
&lt;li>I am pretty sure that the loop can be done better.&lt;/li>
&lt;li>And select the layout in every iteration is not the best of the ideas, but it
works.&lt;/li>
&lt;/ul>
&lt;p>Feel free of do whatever you want with the script. I just hope that it&amp;rsquo;s useful
for somebody else.&lt;/p></description></item><item><title>Python and Scala smoke the peace pipe</title><link>https://agonzalezro.github.io/posts/pygrunn_2013/</link><pubDate>Mon, 13 May 2013 00:00:00 +0000</pubDate><guid>https://agonzalezro.github.io/posts/pygrunn_2013/</guid><description>
&lt;p>This was my talk on the &lt;a href="http://pygrunn.nl">PyGrunn&lt;/a> conference last
Friday.&lt;/p>
&lt;p>I was explaining how can you communicate services written in different
languages using &lt;a href="http://thrift.apache.org/">Apache Thrift&lt;/a> for that.&lt;/p>
&lt;p>In few days the videos will be available, but TBH, I don&amp;rsquo;t really know
if I will publish it here. It was not the first time that I talk in
public using English, but it will be the first time that it is
recorded&amp;hellip; I don&amp;rsquo;t really know if I want to see that! :D&lt;/p>
&lt;p>I really need to improve my speed talking for the next time. I thought
that I will not have enough time to explain all, so, my subconscious
decided that I should be talking as a machine gun.&lt;/p>
&lt;p>Below, you will find the slides, if not, &lt;a href="https://speakerdeck.com/agonzalezro/python-and-scala-smoke-the-peace-pipe">try this
link&lt;/a>.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>PS: you can find the source code of the slides here
&lt;a href="https://github.com/agonzalezro/slides/tree/master/thrift">[1]&lt;/a> &amp;amp; the
source code of the demo here
&lt;a href="https://github.com/agonzalezro/thriftest">[2]&lt;/a>.&lt;/p>
&lt;p>Enjoy them!&lt;/p></description></item><item><title>Here I go PyGrunn'13!</title><link>https://agonzalezro.github.io/posts/pre_pygrunn_2013/</link><pubDate>Wed, 17 Apr 2013 00:00:00 +0000</pubDate><guid>https://agonzalezro.github.io/posts/pre_pygrunn_2013/</guid><description>
&lt;p>I am really proud of say that the next month I will be giving a talk at
PyGrunn!&lt;/p>
&lt;p>This is a really good new for me because PyGrunn is the conference that
my old colleagues organize since years ago. I was on it first time in
2011 just one week after I started working at
&lt;a href="http://paylogic.com">Paylogic&lt;/a>. I meet a lot of interesting people
there and I will see them again this year!&lt;/p>
&lt;p>In 2012 I repeat, but at that time I had already started to organize the
&amp;ldquo;Monthly PyGrunn&amp;quot;s with &lt;a href="http://twitter.com/_ivor">Ivor&lt;/a>. TBH that talks
were quite successful, and not for the quantity of people that we get
there, if not for the quality of them and the networking after!&lt;/p>
&lt;p>I am really happy too because going there I will be able to see a lot of
friends that I miss! I just moved here 5 months ago but I really want to
see them!&lt;/p>
&lt;p>Now, the less important thing: about the talk! I will be talking about
Thrift and how can we use it to talk between different applications in
different languages (in the examples: Python &amp;amp; Scala). When PyGrunn
finish I think that I will have a video where you can see the talk (or
check my English) and I will upload the slides too!&lt;/p>
&lt;p>Thanks to &lt;a href="http://www.pygrunn.org">PyGrunn&lt;/a> for give me this chance!&lt;/p></description></item><item><title>codereview from the POV of a noob</title><link>https://agonzalezro.github.io/posts/codereview/</link><pubDate>Tue, 29 Jan 2013 00:00:00 +0000</pubDate><guid>https://agonzalezro.github.io/posts/codereview/</guid><description>
&lt;p>Hi g(irl|uy)s! I would like to start with a disclaimer:&lt;/p>
&lt;p>&lt;em>I am not (and I don&amp;rsquo;t pretend to be) a craftmanship trooper (they like
to be called like that isn&amp;rsquo;t?), senior engineer with more years of
experience that the technology has, guru, blablabla&amp;hellip;&lt;/em>&lt;/p>
&lt;p>&lt;em>I just want to show my opinion about this process (which I really
like!). But more important that share my opinion, is to know what is
yours, so, please, comment!&lt;/em>&lt;/p>
&lt;p>Today we had an interesting conversation at work about how we make and
how we should make our codereviews. My point of view is that there are
three different things to check:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Code syntax.&lt;/strong> It&amp;rsquo;s a part that should be 100% automagically done.
I usually work with python and I let this work to
&lt;a href="http://pypi.python.org/pypi/flake8">Flake8&lt;/a> on vim, but it&amp;rsquo;s always
good to have a git hook.&lt;/li>
&lt;li>&lt;strong>Reusability and maintainability.&lt;/strong> I am afraid that this is the
worst part to check, it&amp;rsquo;s a manual process and it is really
subjective. Some people can think that use itertools with 2 lambda
functions is pretty clear and comprehensible, other people can think
that this code is the result of a dirty mind developer.&lt;/li>
&lt;li>&lt;strong>Functionality.&lt;/strong> Automated test! All the test that you can, and of
course, they worst the time that you will spent developing them.
There are things that can not be easily tested but in that case
let&amp;rsquo;s suppose that you were clever enough to test them manually and
in the case that is possible you can show it to anybody else (this
really helps!).&lt;/li>
&lt;/ol>
&lt;p>As I said the point 1 can be (and should be) automated! It&amp;rsquo;s really easy
to do, the same way that &lt;a href="http://pypi.python.org/pypi/flake8">Flake8&lt;/a>
exists for python, I am pretty sure that you will have one for your
favourite language. It&amp;rsquo;s really painful get back a pull request just for
some spaces that are not in place.&lt;/p>
&lt;p>For the point 3, yep, let me jump the second for now. Unit testing,
integration testing, functional testing&amp;hellip; whatever you want, but try to
automate it. This + a CI server will make your live really &amp;ldquo;easy&amp;rdquo;!&lt;/p>
&lt;p>And finally, about the second point. Each developer have their way to do
the things, but usually there are some points that can be fixed and
sometimes because we don&amp;rsquo;t know, other times just because we are lazy
but we post code like this:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">f&lt;/span>(a, b, c):
&lt;span style="color:#66d9ef">if&lt;/span> (a &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">and&lt;/span>
request&lt;span style="color:#f92672">.&lt;/span>user &lt;span style="color:#f92672">and&lt;/span>
request&lt;span style="color:#f92672">.&lt;/span>user&lt;span style="color:#f92672">.&lt;/span>is_authenticated() &lt;span style="color:#f92672">and&lt;/span> request&lt;span style="color:#f92672">.&lt;/span>user&lt;span style="color:#f92672">.&lt;/span>has_perm(&lt;span style="color:#e6db74">&amp;#39;write&amp;#39;&lt;/span>)
):
&lt;span style="color:#66d9ef">return&lt;/span> HttpResponse(json&lt;span style="color:#f92672">.&lt;/span>dumps(&lt;span style="color:#e6db74">&amp;#39;{authorized: True, &amp;#39;&lt;/span>a&lt;span style="color:#e6db74">&amp;#39;: a}))&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> a &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> HttpResponse(json&lt;span style="color:#f92672">.&lt;/span>dumps(&lt;span style="color:#e6db74">&amp;#39;{authorized: True, &amp;#39;&lt;/span>a&lt;span style="color:#e6db74">&amp;#39;: a}))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is just an example, but you should agree with me that it&amp;rsquo;s really
easy to improve. This is what, in my opinion should be more checked in
the reviews.&lt;/p>
&lt;p>This was just an example (please, remember that :D), but could be
improved with something like this:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">proper_function_name&lt;/span>(proper_variable_name):
&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;This is an amazing function that will do just a thing.
&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> :param proper_variable_name: what I am?
&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> :returns: An HttpResponse object with the following JSON content:
&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> {&amp;#39;authorized&amp;#39;: bool,
&lt;/span>&lt;span style="color:#e6db74"> &amp;#39;proper_variable_name: int}
&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
is_authorized &lt;span style="color:#f92672">=&lt;/span> (
request&lt;span style="color:#f92672">.&lt;/span>user &lt;span style="color:#f92672">and&lt;/span>
request&lt;span style="color:#f92672">.&lt;/span>user&lt;span style="color:#f92672">.&lt;/span>is_authenticated() &lt;span style="color:#f92672">and&lt;/span>
request&lt;span style="color:#f92672">.&lt;/span>user&lt;span style="color:#f92672">.&lt;/span>has_perm(&lt;span style="color:#e6db74">&amp;#39;write-resource&amp;#39;&lt;/span>)
)
&lt;span style="color:#66d9ef">return&lt;/span> HttpResponse(
json&lt;span style="color:#f92672">.&lt;/span>dumps({
&lt;span style="color:#e6db74">&amp;#39;authorized&amp;#39;&lt;/span>: is_authorized,
&lt;span style="color:#e6db74">&amp;#39;proper_variable_name&amp;#39;&lt;/span>: proper_variable_name
})
)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Those were the improvements (again, remember that it&amp;rsquo;s just an example):&lt;/p>
&lt;ol>
&lt;li>Give a proper name to the function. Don&amp;rsquo;t be afraid, everybody has
autocompletion! :D&lt;/li>
&lt;li>Give a proper name to the vars.&lt;/li>
&lt;li>DOCUMENT! In this example, ready for Sphinx.&lt;/li>
&lt;li>Simplify the if statements, actually, after take a look you made it
dissapear.&lt;/li>
&lt;li>One return.&lt;/li>
&lt;/ol>
&lt;p>So, what&amp;rsquo;s your opinion? What do you think that is more important in a
codereview.&lt;/p></description></item><item><title>Best vim colors ever!</title><link>https://agonzalezro.github.io/posts/colors/</link><pubDate>Wed, 23 Jan 2013 00:00:00 +0000</pubDate><guid>https://agonzalezro.github.io/posts/colors/</guid><description>
&lt;p>Sometimes a developer needs a change, and what can you change better
that the color scheme that you use to develop? You are more than 8h per
day in front of your vim with some beautiful, or crappy, code in front
of you. In the first case the colors doesn&amp;rsquo;t matter, but in the second
it&amp;rsquo;s really important to enjoy, at least, the colors!&lt;/p>
&lt;p>The colors scheme that you use is something really personal, but it
always help when somebody checked them and show them to you without the
embarrasment of doing it yourself, and this is what I will do, because I
was looking, but out of the amazing vimcolorschemetest project nobody
seems to give importance to this. This project is really good, but it
just show to you a bunch of colors without any order of preference, I
will fix that for you!&lt;/p>
&lt;p>Below is the list of the colors that I&amp;rsquo;ve tried that need some mention
here. The order is just alfabetically, not my preferences.&lt;/p>
&lt;h2 id="my-choices">My choices&lt;/h2>
&lt;h3 id="bensday">bensday&lt;/h3>
&lt;p>&lt;img src="https://agonzalezro.github.io/vim/bensday.png" alt="image">&lt;/p>
&lt;h3 id="clarity">clarity&lt;/h3>
&lt;p>&lt;img src="https://agonzalezro.github.io/vim/clarity.png" alt="image">&lt;/p>
&lt;h3 id="desertex">desertEx&lt;/h3>
&lt;p>It&amp;rsquo;s really similar to deser, which comes by default&lt;/p>
&lt;p>&lt;img src="https://agonzalezro.github.io/vim/desertEx.png" alt="image">&lt;/p>
&lt;h3 id="jelleybeans">jelleybeans&lt;/h3>
&lt;p>My favourite for now, but make me chnage my opinion&lt;/p>
&lt;p>&lt;img src="https://agonzalezro.github.io/vim/jelleybeans.png" alt="image">&lt;/p>
&lt;h3 id="winsterday">winsterday&lt;/h3>
&lt;p>&lt;img src="https://agonzalezro.github.io/vim/winsterday.png" alt="image">&lt;/p>
&lt;p>I am currently using &lt;em>jelleybeans&lt;/em> (after a recommendation of my
colleague Robin), I really like it, but a little bit &amp;ldquo;happier&amp;rdquo; colors
would not be bad either :)&lt;/p>
&lt;h2 id="find-them">Find them!&lt;/h2>
&lt;p>You can find all this colors and a lot more here:
&lt;a href="https://github.com/flazz/vim-colorschemes">https://github.com/flazz/vim-colorschemes&lt;/a>&lt;/p>
&lt;p>Please, I am open to all the suggestion that you want, since the new
amazing color scheme for vim that I don&amp;rsquo;t know yet, until the killer
plugin that I can not miss! And of course, if you want to codereview the
code that you see on the screenshots feel free too!&lt;/p></description></item><item><title>PyGrunn Winter Hackathon 2012</title><link>https://agonzalezro.github.io/posts/winter-hackathon-2012/</link><pubDate>Tue, 27 Nov 2012 00:00:00 +0000</pubDate><guid>https://agonzalezro.github.io/posts/winter-hackathon-2012/</guid><description>
&lt;p>Few days ago, actually, more than one week ago (but I was very busy :)
we made our first &lt;a href="http://paylogic.github.com/winter-hackathon/">PyGrunn
hackathon&lt;/a>. I was lucky
and from all the list of ideas, the selected was one of mines! The
slides generator, that finally we call &lt;strong>hovercraft&lt;/strong>. Here is a small
introduction about what I wanted:&lt;/p>
&lt;p>&lt;em>A small platform to create slides and have them always associated to a
web with this possibilities:&lt;/em>&lt;/p>
&lt;ul>
&lt;li>&lt;em>Create an account with Google (or perhaps twitter, facebook&amp;hellip;), but Google seems the best option for me now.&lt;/em>&lt;/li>
&lt;li>&lt;em>Create or edit new slides related with this account. This slides creator/editor will have the following functionalities:&lt;/em>
&lt;ul>
&lt;li>&lt;em>Select one image for background in fullscreen.&lt;/em>&lt;/li>
&lt;li>&lt;em>Write one or 2 lines of text that will always fulfill the width of the slide.&lt;/em>&lt;/li>
&lt;li>&lt;em>Change the font family.&lt;/em>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;em>Have a permanent link to your slide (completely public for now).&lt;/em>&lt;/li>
&lt;/ul>
&lt;p>After the hackathon we got something very similar to what I wanted, with
some small issues. But this post is not about what we did wrong! This
post is about which technologies did we use to finish the project and
perhaps, if I am lucky, start a discussion on why we did/didn&amp;rsquo;t make a
good choice.&lt;/p>
&lt;h2 id="how-do-we-achieve-this">How do we achieve this?&lt;/h2>
&lt;h3 id="backend">Backend&lt;/h3>
&lt;p>The backend of the application was almost inexistent, we only wanted to
allow the users to login with a Google account to have access to edit
their slides. Being a hackathon we didn&amp;rsquo;t spend time adding CRUD
(Create/Read/Update/Delete) functionalities to manage the users.&lt;/p>
&lt;p>If you want to delete your user, let me know, I will do it by hand :) It
was made with &lt;a href="http://flask.pocoo.org/">Flask&lt;/a>, Flask-OAuth for the
authentication with Google and &lt;a href="http://redis.io/">redis&lt;/a> to store the
presentations.&lt;/p>
&lt;h3 id="frontend">Frontend&lt;/h3>
&lt;p>The viewer was really simply too because from the beginning we wanted to
play with the editor (it was more funny). For doing it we used
&lt;a href="http://lab.hakim.se/reveal-js/#/">revealjs&lt;/a> to show the presentation
with slide effect and &lt;a href="http://fittextjs.com/">jquery-fittext&lt;/a> to make it
fullslide.&lt;/p>
&lt;p>Now the important part! We made the editor with &lt;a href="http://agonzalezro.github.com/backbonejs-underscore-small-intro.html">backbone and
underscore&lt;/a>,
it seems to us the better choice, since we will have 3 principal views:&lt;/p>
&lt;dl>
&lt;dt>The background chooser&lt;/dt>
&lt;dd>which is connection to &lt;a href="http://www.deviantart.com/">deviantart&lt;/a> to
perform a query of good backgrounds for your slide. Then you can
click on one of the results and will be applied to the current
slide.&lt;/dd>
&lt;dt>The font chooser&lt;/dt>
&lt;dd>which is loading some google fonts, we wanted to do this
automagically but we couldn&amp;rsquo;t finish it at time. The behaviour is
the same, you choose a font and its applied to the current slide.&lt;/dd>
&lt;dt>The slide content&lt;/dt>
&lt;dd>that should be WYSIWYG (What You See Is What You Get) but for now is
on the middle, because we couldn&amp;rsquo;t make the text bigger while you
are writing.&lt;/dd>
&lt;/dl>
&lt;h3 id="deployment">Deployment&lt;/h3>
&lt;p>And finally the deployment that was made with heroku and redistogo that
allows you to use a 5M non-persistant DB that is good for a demo.&lt;/p>
&lt;h2 id="resources">Resources&lt;/h2>
&lt;ul>
&lt;li>You can see the list of all the projects or&amp;hellip;&lt;/li>
&lt;li>You can find all the &lt;a href="https://github.com/agonzalezro/hovercraft">source on
github&lt;/a> or&amp;hellip;&lt;/li>
&lt;li>You can &lt;a href="http://nameless-spire-1402.herokuapp.com/">try a demo&lt;/a> too!&lt;/li>
&lt;li>And if you are too lazy to try it, here you have an screenshot:&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://agonzalezro.github.io/hovercraft.png" alt="image">&lt;/p>
&lt;h2 id="thanks">Thanks!&lt;/h2>
&lt;p>I really want to thank &lt;a href="http://www.paylogic.nl">Paylogic&lt;/a> for letting us
a place where to do the project and for provide us food &amp;amp; beers. What a
developer will develop without food and beer?&lt;/p>
&lt;p>I want to thank too all the guys that &amp;ldquo;spend&amp;rdquo; the weekend with me having
fun, but working hard too!&lt;/p>
&lt;h2 id="conclusions">Conclusions&lt;/h2>
&lt;p>The good point of all this editing is that thanks to backbone and thanks
to the backend guys is saved without any action needed. The idea of this
full project was:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Have fun!&lt;/strong>&lt;/li>
&lt;li>Simplifying slide creation&lt;/li>
&lt;li>Make it really simply to share those slides.&lt;/li>
&lt;/ol>
&lt;p>I didn&amp;rsquo;t want to go really depth into the development of this project,
&lt;strong>I only wanted to give a quick overview of what we made in two days.&lt;/strong>
But if you are really interested on something more explained, let me
know on the comments and I will try to help you in all what I can.&lt;/p></description></item><item><title>backbone.js + underscore: small intro</title><link>https://agonzalezro.github.io/posts/backbone/</link><pubDate>Thu, 01 Nov 2012 00:00:00 +0000</pubDate><guid>https://agonzalezro.github.io/posts/backbone/</guid><description>
&lt;p>Today, &lt;a href="http://twitter.com/olegpidsadnyi/">Oleg&lt;/a> gave a talk about
backbone at &lt;a href="http://paylogic.nl/">Paylogic&lt;/a>. We were using it for a
really fancy application inside our backoffice, it was quite funny write
it and Oleg decided to share the knowledge.&lt;/p>
&lt;p>I used the techtalk to take some notes and, since this piece of code
will have no sense out of our backoffice, I&amp;rsquo;ve written a small example
that you can find as a &lt;a href="https://gist.github.com/3982819">gist&lt;/a> on my
github. I will use it to explain to you some of the useful things that
you can do with backbone and underscore. Feel free to improve it.&lt;/p>
&lt;p>This is only a introductory post, if you want advance stuff you should
go to the &lt;a href="http://backbonejs.org/">backbone official documentation&lt;/a> &amp;amp;
&lt;a href="http://underscorejs.org/">underscore docs&lt;/a>.&lt;/p>
&lt;h2 id="why">Why?&lt;/h2>
&lt;p>Backbone is really useful when you make complex GUIs on client side. You
can make your code like in a desktop app using events to handle the
actions. It&amp;rsquo;s not needed to pass around instances of parents views,
let&amp;rsquo;s use only the events for that purpose, and let the child decide.&lt;/p>
&lt;p>You have models too, that you can sync (or not) with the server.&lt;/p>
&lt;h2 id="models">Models&lt;/h2>
&lt;p>In backbone you can have local model and sync them with the server or
with local storage (not explained in this intro). In our example we
will:&lt;/p>
&lt;ol>
&lt;li>Create a collection to save our objects (type Item) in.&lt;/li>
&lt;li>Create the model Item.&lt;/li>
&lt;li>Create 2 object type Item inside this collection.&lt;/li>
&lt;li>Render them.&lt;/li>
&lt;/ol>
&lt;p>The 3 points can be made only with these lines of code. It&amp;rsquo;s really
simple! (after know how to do it :p):&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">Item&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Backbone&lt;/span>.&lt;span style="color:#a6e22e">Model&lt;/span>.&lt;span style="color:#a6e22e">extend&lt;/span>();
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">Items&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Backbone&lt;/span>.&lt;span style="color:#a6e22e">Collection&lt;/span>.&lt;span style="color:#a6e22e">extend&lt;/span>({
&lt;span style="color:#a6e22e">model&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Item&lt;/span>
});
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">items&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Items&lt;/span>();
&lt;span style="color:#a6e22e">items&lt;/span>.&lt;span style="color:#a6e22e">add&lt;/span>([{&lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;foo&amp;#34;&lt;/span>}, {&lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;bar&amp;#34;&lt;/span>}]);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Note&lt;/strong>: Setting values in the objects With .set will trigger the event
change. You can silent it in case that needed, but it&amp;rsquo;s really
useful, for example, to save it.&lt;/p>
&lt;p>&lt;strong>Second note&lt;/strong>: backbone is f***ing clever! Imagine, you are changing a
name, if the name has changed on the collection, the event will be raised,
if not, it will not. This means that if you are editing, but finally
you change your mind and you didn&amp;rsquo;t made any change, the event will
not be raised.&lt;/p>
&lt;h2 id="events">Events&lt;/h2>
&lt;p>They are really useful to remove dependencies between elements. For
example, with jQuery if you change a element from another, the first one
needs to know about the second. With backbone you can catch the event
with the child element and do whatever you want with it.&lt;/p>
&lt;p>On the example of my &lt;a href="https://gist.github.com/3982819">gist&lt;/a> I show an
alert box with the name of the element. But you could, for example,
change it to an editable input.&lt;/p>
&lt;p>This is the code of the example:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">ItemView&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Backbone&lt;/span>.&lt;span style="color:#a6e22e">View&lt;/span>.&lt;span style="color:#a6e22e">extend&lt;/span>({
...
&lt;span style="color:#a6e22e">events&lt;/span>&lt;span style="color:#f92672">:&lt;/span> {
&lt;span style="color:#e6db74">&amp;#34;dblclick&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;onDoubleClick&amp;#34;&lt;/span>
},
...
&lt;span style="color:#a6e22e">onDoubleClick&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">ev&lt;/span>) {
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">text&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">$&lt;/span>.&lt;span style="color:#a6e22e">trim&lt;/span>(&lt;span style="color:#a6e22e">$&lt;/span>(&lt;span style="color:#a6e22e">ev&lt;/span>.&lt;span style="color:#a6e22e">target&lt;/span>).&lt;span style="color:#a6e22e">text&lt;/span>());
&lt;span style="color:#a6e22e">alert&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Hey! Why do you click on &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">text&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;?&amp;#34;&lt;/span>);
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">ev&lt;/span>); &lt;span style="color:#75715e">//Play with this :)
&lt;/span>&lt;span style="color:#75715e">&lt;/span> }
});
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We are binding the &lt;code>dblclick&lt;/code> event to the function &lt;code>onDoubleClick&lt;/code>.
This function will receive the event, and the event will have the target
(in this case the &lt;code>&amp;lt;li/&amp;gt;&lt;/code> that we are clicking.&lt;/p>
&lt;h2 id="underscore">Underscore&lt;/h2>
&lt;p>It&amp;rsquo;s really useful to Work with collections. In out example we are using
it to iterate over the items:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">render&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>() {
&lt;span style="color:#a6e22e">_&lt;/span>.&lt;span style="color:#a6e22e">each&lt;/span>(&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">items&lt;/span>.&lt;span style="color:#a6e22e">models&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">item&lt;/span>) {
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">itemview&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">ItemView&lt;/span>(&lt;span style="color:#a6e22e">item&lt;/span>);
&lt;span style="color:#a6e22e">$&lt;/span>(&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">el&lt;/span>).&lt;span style="color:#a6e22e">append&lt;/span>(&lt;span style="color:#a6e22e">itemview&lt;/span>.&lt;span style="color:#a6e22e">render&lt;/span>().&lt;span style="color:#a6e22e">el&lt;/span>);
}, &lt;span style="color:#66d9ef">this&lt;/span>);
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you read carefully this piece of code you will realize that we are
instantiating a new ItemView for each particular item, so it has its own
container element created on the fly, re-renderable each time when data
is updated and all events are delegated to this element.&lt;/p>
&lt;p>The amazing thing that you can do with underscore is use templates (yes,
like jinja or django-templates, but in JS)! And we are doing it:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">ItemView&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Backbone&lt;/span>.&lt;span style="color:#a6e22e">View&lt;/span>.&lt;span style="color:#a6e22e">extend&lt;/span>({
...
&lt;span style="color:#a6e22e">template&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>.&lt;span style="color:#a6e22e">template&lt;/span>(&lt;span style="color:#a6e22e">$&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;#item-template&amp;#34;&lt;/span>).&lt;span style="color:#a6e22e">html&lt;/span>()),
...
&lt;span style="color:#a6e22e">render&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>() {
&lt;span style="color:#a6e22e">$&lt;/span>(&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">el&lt;/span>).&lt;span style="color:#a6e22e">html&lt;/span>(&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">template&lt;/span>(&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">item&lt;/span>.&lt;span style="color:#a6e22e">toJSON&lt;/span>()));
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>;
},
...
&amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">script&lt;/span> &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;text/template&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;item-template&amp;#34;&lt;/span>&amp;gt;
&lt;span style="color:#f92672">&amp;lt;%=&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">%&amp;gt;&lt;/span>
&amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="extra-ball">Extra ball&lt;/h2>
&lt;p>Use &lt;code>_.debounce&lt;/code> to don&amp;rsquo;t call the functions thousands of times, example
drag&amp;amp;dropping an element it will be useful.&lt;/p>
&lt;p>For example in our project we had to sort with drag and drop some
elements of a list, instead send this event in each drag movement, we
made it after 200s being quiet with:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">onChange&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>.&lt;span style="color:#a6e22e">debounce&lt;/span>(&lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">ev&lt;/span>) {
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">pools&lt;/span>.&lt;span style="color:#a6e22e">save&lt;/span>();
}, &lt;span style="color:#ae81ff">200&lt;/span>),
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Please comment your thoughts about the post. We are all here to learn,
and it&amp;rsquo;s really easy that I made some mistake explaining this.
Furhtermore, I know that my English is not really good, so, I will
apreciate constructive comments about it too :)&lt;/p>
&lt;p>Enjoy it!&lt;/p></description></item></channel></rss>